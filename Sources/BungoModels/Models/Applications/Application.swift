// This File was auto generated by BungoKitGen
//
// File: Application.swift

import Foundation

public extension Applications {
    struct Application: Codable {
        /// Unique ID assigned to the application
        public var applicationId: Int32?
        /// Date the application was first added to our database.
        public var creationDate: Date?
        /// Date the first time the application status entered the 'Public' status.
        public var firstPublished: Date?
        /// Link to website for the application where a user can learn more about the app.
        public var link: String?
        /// Name of the application
        public var name: String?
        /// Value of the Origin header sent in requests generated by this application.
        public var origin: String?
        /// An optional override for the Authorize view name.
        public var overrideAuthorizeViewName: String?
        /// URL used to pass the user's authorization code to the application
        public var redirectUrl: String?
        /// Permissions the application needs to work
        public var scope: Int64?
        /// Current status of the application.
        public var status: Applications.ApplicationStatus?
        /// Date the application status last changed.
        public var statusChanged: Date?
        /// List of team members who manage this application on Bungie.net. Will always consist of at least the application owner.
        public var team: [Applications.ApplicationDeveloper]?

        public enum CodingKeys: String, CodingKey {
            case applicationId
            case creationDate
            case firstPublished
            case link
            case name
            case origin
            case overrideAuthorizeViewName
            case redirectUrl
            case scope
            case status
            case statusChanged
            case team
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            applicationId = try? container.decode(Int32.self, forKey: CodingKeys.applicationId)
            creationDate = try? container.decode(Date.self, forKey: CodingKeys.creationDate)
            firstPublished = try? container.decode(Date.self, forKey: CodingKeys.firstPublished)
            link = try? container.decode(String.self, forKey: CodingKeys.link)
            name = try? container.decode(String.self, forKey: CodingKeys.name)
            origin = try? container.decode(String.self, forKey: CodingKeys.origin)
            overrideAuthorizeViewName = try? container.decode(String.self, forKey: CodingKeys.overrideAuthorizeViewName)
            redirectUrl = try? container.decode(String.self, forKey: CodingKeys.redirectUrl)
            let scope = try? container.decode(String.self, forKey: CodingKeys.scope)
            if let scope, let scopeInt = Int64(scope) {
                self.scope = scopeInt
            } else {
                self.scope = nil
            }
            status = try? container.decode(Applications.ApplicationStatus.self, forKey: CodingKeys.status)
            statusChanged = try? container.decode(Date.self, forKey: CodingKeys.statusChanged)
            team = try? container.decode([Applications.ApplicationDeveloper].self, forKey: CodingKeys.team)
        }
    }
}
