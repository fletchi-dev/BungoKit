// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: GeneralUser.swift

import Foundation

public extension User {
    struct GeneralUser: Codable {
        public var about: String?

        public var blizzardDisplayName: String?

        public var cachedBungieGlobalDisplayName: String?

        public var cachedBungieGlobalDisplayNameCode: Int16?

        public var context: User.UserToUserContext?

        public var displayName: String?

        public var egsDisplayName: String?

        public var fbDisplayName: String?

        public var firstAccess: Date?

        public var isDeleted: Bool?

        public var lastBanReportId: Int64?

        public var lastUpdate: Date?

        public var legacyPortalUID: Int64?

        public var locale: String?

        public var localeInheritDefault: Bool?

        public var membershipId: Int64?

        public var normalizedName: String?

        public var profileBanExpire: Date?

        public var profilePicture: Int32?

        public var profilePicturePath: String?

        public var profilePictureWidePath: String?

        public var profileTheme: Int32?

        public var profileThemeName: String?

        public var psnDisplayName: String?

        public var showActivity: Bool?

        public var showGroupMessaging: Bool?

        public var stadiaDisplayName: String?

        public var statusDate: Date?

        public var statusText: String?

        public var steamDisplayName: String?

        public var successMessageFlags: Int64?

        public var twitchDisplayName: String?

        public var uniqueName: String?

        public var userTitle: Int32?

        public var userTitleDisplay: String?

        public var xboxDisplayName: String?

        public enum CodingKeys: String, CodingKey {
            case about
            case blizzardDisplayName
            case cachedBungieGlobalDisplayName
            case cachedBungieGlobalDisplayNameCode
            case context
            case displayName
            case egsDisplayName
            case fbDisplayName
            case firstAccess
            case isDeleted
            case lastBanReportId
            case lastUpdate
            case legacyPortalUID
            case locale
            case localeInheritDefault
            case membershipId
            case normalizedName
            case profileBanExpire
            case profilePicture
            case profilePicturePath
            case profilePictureWidePath
            case profileTheme
            case profileThemeName
            case psnDisplayName
            case showActivity
            case showGroupMessaging
            case stadiaDisplayName
            case statusDate
            case statusText
            case steamDisplayName
            case successMessageFlags
            case twitchDisplayName
            case uniqueName
            case userTitle
            case userTitleDisplay
            case xboxDisplayName
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            about = try? container.decode(String.self, forKey: CodingKeys.about)
            blizzardDisplayName = try? container.decode(String.self, forKey: CodingKeys.blizzardDisplayName)
            cachedBungieGlobalDisplayName = try? container.decode(String.self, forKey: CodingKeys.cachedBungieGlobalDisplayName)
            cachedBungieGlobalDisplayNameCode = try? container.decode(Int16.self, forKey: CodingKeys.cachedBungieGlobalDisplayNameCode)
            context = try? container.decode(User.UserToUserContext.self, forKey: CodingKeys.context)
            displayName = try? container.decode(String.self, forKey: CodingKeys.displayName)
            egsDisplayName = try? container.decode(String.self, forKey: CodingKeys.egsDisplayName)
            fbDisplayName = try? container.decode(String.self, forKey: CodingKeys.fbDisplayName)
            firstAccess = try? container.decode(Date.self, forKey: CodingKeys.firstAccess)
            isDeleted = try? container.decode(Bool.self, forKey: CodingKeys.isDeleted)
            let lastBanReportId = try? container.decode(String.self, forKey: CodingKeys.lastBanReportId)
            if let lastBanReportId, let lastBanReportIdInt = Int64(lastBanReportId) {
                self.lastBanReportId = lastBanReportIdInt
            } else {
                self.lastBanReportId = nil
            }
            lastUpdate = try? container.decode(Date.self, forKey: CodingKeys.lastUpdate)
            let legacyPortalUID = try? container.decode(String.self, forKey: CodingKeys.legacyPortalUID)
            if let legacyPortalUID, let legacyPortalUIDInt = Int64(legacyPortalUID) {
                self.legacyPortalUID = legacyPortalUIDInt
            } else {
                self.legacyPortalUID = nil
            }
            locale = try? container.decode(String.self, forKey: CodingKeys.locale)
            localeInheritDefault = try? container.decode(Bool.self, forKey: CodingKeys.localeInheritDefault)
            let membershipId = try? container.decode(String.self, forKey: CodingKeys.membershipId)
            if let membershipId, let membershipIdInt = Int64(membershipId) {
                self.membershipId = membershipIdInt
            } else {
                self.membershipId = nil
            }
            normalizedName = try? container.decode(String.self, forKey: CodingKeys.normalizedName)
            profileBanExpire = try? container.decode(Date.self, forKey: CodingKeys.profileBanExpire)
            profilePicture = try? container.decode(Int32.self, forKey: CodingKeys.profilePicture)
            profilePicturePath = try? container.decode(String.self, forKey: CodingKeys.profilePicturePath)
            profilePictureWidePath = try? container.decode(String.self, forKey: CodingKeys.profilePictureWidePath)
            profileTheme = try? container.decode(Int32.self, forKey: CodingKeys.profileTheme)
            profileThemeName = try? container.decode(String.self, forKey: CodingKeys.profileThemeName)
            psnDisplayName = try? container.decode(String.self, forKey: CodingKeys.psnDisplayName)
            showActivity = try? container.decode(Bool.self, forKey: CodingKeys.showActivity)
            showGroupMessaging = try? container.decode(Bool.self, forKey: CodingKeys.showGroupMessaging)
            stadiaDisplayName = try? container.decode(String.self, forKey: CodingKeys.stadiaDisplayName)
            statusDate = try? container.decode(Date.self, forKey: CodingKeys.statusDate)
            statusText = try? container.decode(String.self, forKey: CodingKeys.statusText)
            steamDisplayName = try? container.decode(String.self, forKey: CodingKeys.steamDisplayName)
            let successMessageFlags = try? container.decode(String.self, forKey: CodingKeys.successMessageFlags)
            if let successMessageFlags, let successMessageFlagsInt = Int64(successMessageFlags) {
                self.successMessageFlags = successMessageFlagsInt
            } else {
                self.successMessageFlags = nil
            }
            twitchDisplayName = try? container.decode(String.self, forKey: CodingKeys.twitchDisplayName)
            uniqueName = try? container.decode(String.self, forKey: CodingKeys.uniqueName)
            userTitle = try? container.decode(Int32.self, forKey: CodingKeys.userTitle)
            userTitleDisplay = try? container.decode(String.self, forKey: CodingKeys.userTitleDisplay)
            xboxDisplayName = try? container.decode(String.self, forKey: CodingKeys.xboxDisplayName)
        }
    }
}
