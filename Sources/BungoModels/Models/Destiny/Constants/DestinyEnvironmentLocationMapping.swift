// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyEnvironmentLocationMapping.swift

import Foundation

public extension Destiny.Constants {
    struct DestinyEnvironmentLocationMapping: Codable {
        /// A hint that the UI uses to figure out how this location is activated by the player.
        public var activationSource: String?

        /// If this is populated, this is the activity you have to be playing in order to see this location appear because of this mapping. (theoretically, a location can have multiple mappings, and some might require you to be in a specific activity when others don't)
        public var activityHash: UInt32?

        /// If this is populated, it is the item that you must possess for this location to be active because of this mapping. (theoretically, a location can have multiple mappings, and some might require an item while others don't)
        public var itemHash: UInt32?

        /// The location that is revealed on the director by this mapping.
        public var locationHash: UInt32?

        /// If this is populated, this is an objective related to the location.
        public var objectiveHash: UInt32?

        public enum CodingKeys: String, CodingKey {
            case activationSource
            case activityHash
            case itemHash
            case locationHash
            case objectiveHash
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            activationSource = try? container.decode(String.self, forKey: CodingKeys.activationSource)
            activityHash = try? container.decode(UInt32.self, forKey: CodingKeys.activityHash)
            itemHash = try? container.decode(UInt32.self, forKey: CodingKeys.itemHash)
            locationHash = try? container.decode(UInt32.self, forKey: CodingKeys.locationHash)
            objectiveHash = try? container.decode(UInt32.self, forKey: CodingKeys.objectiveHash)
        }
    }
}
