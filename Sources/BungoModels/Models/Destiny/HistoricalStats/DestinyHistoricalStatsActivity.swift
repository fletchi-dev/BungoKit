// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyHistoricalStatsActivity.swift

import Foundation

public extension Destiny.HistoricalStats {
    /// Summary information about the activity that was played.
    struct DestinyHistoricalStatsActivity: Codable {
        /// The unique hash identifier of the DestinyActivityDefinition that was played.
        public var directorActivityHash: UInt32?

        /// The unique identifier for this *specific* match that was played.
        /// This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.
        public var instanceId: Int64?

        /// Whether or not the match was a private match.
        public var isPrivate: Bool?

        /// The Membership Type indicating the platform on which this match was played.
        public var membershipType: BungieMembershipType?

        /// Indicates the most specific game mode of the activity that we could find.
        public var mode: Destiny.HistoricalStats.Definitions.DestinyActivityModeType?

        /// The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.
        public var modes: [Destiny.HistoricalStats.Definitions.DestinyActivityModeType]?

        /// The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it'd be named activityHash. Too late now.
        public var referenceId: UInt32?

        public enum CodingKeys: String, CodingKey {
            case directorActivityHash
            case instanceId
            case isPrivate
            case membershipType
            case mode
            case modes
            case referenceId
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            directorActivityHash = try? container.decode(UInt32.self, forKey: CodingKeys.directorActivityHash)
            let instanceId = try? container.decode(String.self, forKey: CodingKeys.instanceId)
            if let instanceId, let instanceIdInt = Int64(instanceId) {
                self.instanceId = instanceIdInt
            } else {
                self.instanceId = nil
            }
            isPrivate = try? container.decode(Bool.self, forKey: CodingKeys.isPrivate)
            membershipType = try? container.decode(BungieMembershipType.self, forKey: CodingKeys.membershipType)
            mode = try? container.decode(Destiny.HistoricalStats.Definitions.DestinyActivityModeType.self, forKey: CodingKeys.mode)
            modes = try? container.decode([Destiny.HistoricalStats.Definitions.DestinyActivityModeType].self, forKey: CodingKeys.modes)
            referenceId = try? container.decode(UInt32.self, forKey: CodingKeys.referenceId)
        }
    }
}
