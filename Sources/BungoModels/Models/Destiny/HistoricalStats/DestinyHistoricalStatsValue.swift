// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyHistoricalStatsValue.swift

import Foundation

public extension Destiny.HistoricalStats {
    struct DestinyHistoricalStatsValue: Codable {
        /// When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
        public var activityId: Int64?

        /// Basic stat value.
        public var basic: Destiny.HistoricalStats.DestinyHistoricalStatsValuePair?

        /// Per game average for the statistic, if applicable
        public var pga: Destiny.HistoricalStats.DestinyHistoricalStatsValuePair?

        /// Unique ID for this stat
        public var statId: String?

        /// Weighted value of the stat if a weight greater than 1 has been assigned.
        public var weighted: Destiny.HistoricalStats.DestinyHistoricalStatsValuePair?

        public enum CodingKeys: String, CodingKey {
            case activityId
            case basic
            case pga
            case statId
            case weighted
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            let activityId = try? container.decode(String.self, forKey: CodingKeys.activityId)
            if let activityId, let activityIdInt = Int64(activityId) {
                self.activityId = activityIdInt
            } else {
                self.activityId = nil
            }
            basic = try? container.decode(Destiny.HistoricalStats.DestinyHistoricalStatsValuePair.self, forKey: CodingKeys.basic)
            pga = try? container.decode(Destiny.HistoricalStats.DestinyHistoricalStatsValuePair.self, forKey: CodingKeys.pga)
            statId = try? container.decode(String.self, forKey: CodingKeys.statId)
            weighted = try? container.decode(Destiny.HistoricalStats.DestinyHistoricalStatsValuePair.self, forKey: CodingKeys.weighted)
        }
    }
}
