// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyHistoricalStatsByPeriod.swift

import Foundation

public extension Destiny.HistoricalStats {
    struct DestinyHistoricalStatsByPeriod: Codable {
        public var allTime: [String: Destiny.HistoricalStats.DestinyHistoricalStatsValue]?

        public var allTimeTier1: [String: Destiny.HistoricalStats.DestinyHistoricalStatsValue]?

        public var allTimeTier2: [String: Destiny.HistoricalStats.DestinyHistoricalStatsValue]?

        public var allTimeTier3: [String: Destiny.HistoricalStats.DestinyHistoricalStatsValue]?

        public var daily: [Destiny.HistoricalStats.DestinyHistoricalStatsPeriodGroup]?

        public var monthly: [Destiny.HistoricalStats.DestinyHistoricalStatsPeriodGroup]?

        public enum CodingKeys: String, CodingKey {
            case allTime
            case allTimeTier1
            case allTimeTier2
            case allTimeTier3
            case daily
            case monthly
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            allTime = try? container.decode([String: Destiny.HistoricalStats.DestinyHistoricalStatsValue].self, forKey: CodingKeys.allTime)
            allTimeTier1 = try? container.decode([String: Destiny.HistoricalStats.DestinyHistoricalStatsValue].self, forKey: CodingKeys.allTimeTier1)
            allTimeTier2 = try? container.decode([String: Destiny.HistoricalStats.DestinyHistoricalStatsValue].self, forKey: CodingKeys.allTimeTier2)
            allTimeTier3 = try? container.decode([String: Destiny.HistoricalStats.DestinyHistoricalStatsValue].self, forKey: CodingKeys.allTimeTier3)
            daily = try? container.decode([Destiny.HistoricalStats.DestinyHistoricalStatsPeriodGroup].self, forKey: CodingKeys.daily)
            monthly = try? container.decode([Destiny.HistoricalStats.DestinyHistoricalStatsPeriodGroup].self, forKey: CodingKeys.monthly)
        }
    }
}
