// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyHistoricalStatsDefinition.swift

import Foundation

public extension Destiny.HistoricalStats.Definitions {
    struct DestinyHistoricalStatsDefinition: Codable {
        /// Category for the stat.
        public var category: Destiny.HistoricalStats.Definitions.DestinyStatsCategoryType?

        /// Statistic group
        public var group: Destiny.HistoricalStats.Definitions.DestinyStatsGroupType?

        /// Optional URI to an icon for the statistic
        public var iconImage: String?

        /// The tier associated with this medal - be it implicitly or explicitly.
        public var medalTierHash: UInt32?

        /// Optional icon for the statistic
        public var mergeMethod: Int32?

        /// Game modes where this statistic can be reported.
        public var modes: [Destiny.HistoricalStats.Definitions.DestinyActivityModeType]?

        /// Time periods the statistic covers
        public var periodTypes: [Destiny.HistoricalStats.Definitions.PeriodType]?

        /// Description of a stat if applicable.
        public var statDescription: String?

        /// Unique programmer friendly ID for this stat
        public var statId: String?

        /// Display name
        public var statName: String?

        /// Display name abbreviated
        public var statNameAbbr: String?

        /// Localized Unit Name for the stat.
        public var unitLabel: String?

        /// Unit, if any, for the statistic
        public var unitType: Destiny.HistoricalStats.Definitions.UnitType?

        /// Weight assigned to this stat indicating its relative impressiveness.
        public var weight: Int32?

        public enum CodingKeys: String, CodingKey {
            case category
            case group
            case iconImage
            case medalTierHash
            case mergeMethod
            case modes
            case periodTypes
            case statDescription
            case statId
            case statName
            case statNameAbbr
            case unitLabel
            case unitType
            case weight
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            category = try? container.decode(Destiny.HistoricalStats.Definitions.DestinyStatsCategoryType.self, forKey: CodingKeys.category)
            group = try? container.decode(Destiny.HistoricalStats.Definitions.DestinyStatsGroupType.self, forKey: CodingKeys.group)
            iconImage = try? container.decode(String.self, forKey: CodingKeys.iconImage)
            medalTierHash = try? container.decode(UInt32.self, forKey: CodingKeys.medalTierHash)
            mergeMethod = try? container.decode(Int32.self, forKey: CodingKeys.mergeMethod)
            modes = try? container.decode([Destiny.HistoricalStats.Definitions.DestinyActivityModeType].self, forKey: CodingKeys.modes)
            periodTypes = try? container.decode([Destiny.HistoricalStats.Definitions.PeriodType].self, forKey: CodingKeys.periodTypes)
            statDescription = try? container.decode(String.self, forKey: CodingKeys.statDescription)
            statId = try? container.decode(String.self, forKey: CodingKeys.statId)
            statName = try? container.decode(String.self, forKey: CodingKeys.statName)
            statNameAbbr = try? container.decode(String.self, forKey: CodingKeys.statNameAbbr)
            unitLabel = try? container.decode(String.self, forKey: CodingKeys.unitLabel)
            unitType = try? container.decode(Destiny.HistoricalStats.Definitions.UnitType.self, forKey: CodingKeys.unitType)
            weight = try? container.decode(Int32.self, forKey: CodingKeys.weight)
        }
    }
}
