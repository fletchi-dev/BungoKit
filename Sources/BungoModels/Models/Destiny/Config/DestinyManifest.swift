// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyManifest.swift

import Foundation

public extension Destiny.Config {
    /// DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform.
    struct DestinyManifest: Codable {
        /// Information about the "Image Pyramid" for Destiny icons. Where possible, we create smaller versions of Destiny icons. These are found as subfolders under the location of the "original/full size" Destiny images, with the same file name and extension as the original image itself. (this lets us avoid sending largely redundant path info with every entity, at the expense of the smaller versions of the image being less discoverable)
        public var iconImagePyramidInfo: [Destiny.Config.ImagePyramidEntry]?

        /// This points to the generated JSON that contains all the Definitions. Each key is a locale. The value is a dictionary, where the key is a definition type by name, and the value is the path to the file for that definition. WARNING: This is unsafe and subject to change - do not depend on data in these files staying around long-term.
        public var jsonWorldComponentContentPaths: [String: [String: String]]?

        /// This points to the generated JSON that contains all the Definitions. Each key is a locale. The value is a path to the aggregated world definitions (warning: large file!)
        public var jsonWorldContentPaths: [String: String]?

        public var mobileAssetContentPath: String?

        public var mobileClanBannerDatabasePath: String?

        public var mobileGearAssetDataBases: [Destiny.Config.GearAssetDataBaseDefinition]?

        public var mobileGearCDN: [String: String]?

        public var mobileWorldContentPaths: [String: String]?

        public var version: String?

        public enum CodingKeys: String, CodingKey {
            case iconImagePyramidInfo
            case jsonWorldComponentContentPaths
            case jsonWorldContentPaths
            case mobileAssetContentPath
            case mobileClanBannerDatabasePath
            case mobileGearAssetDataBases
            case mobileGearCDN
            case mobileWorldContentPaths
            case version
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            iconImagePyramidInfo = try? container.decode([Destiny.Config.ImagePyramidEntry].self, forKey: CodingKeys.iconImagePyramidInfo)
            jsonWorldComponentContentPaths = try? container.decode([String: [String: String]].self, forKey: CodingKeys.jsonWorldComponentContentPaths)
            jsonWorldContentPaths = try? container.decode([String: String].self, forKey: CodingKeys.jsonWorldContentPaths)
            mobileAssetContentPath = try? container.decode(String.self, forKey: CodingKeys.mobileAssetContentPath)
            mobileClanBannerDatabasePath = try? container.decode(String.self, forKey: CodingKeys.mobileClanBannerDatabasePath)
            mobileGearAssetDataBases = try? container.decode([Destiny.Config.GearAssetDataBaseDefinition].self, forKey: CodingKeys.mobileGearAssetDataBases)
            mobileGearCDN = try? container.decode([String: String].self, forKey: CodingKeys.mobileGearCDN)
            mobileWorldContentPaths = try? container.decode([String: String].self, forKey: CodingKeys.mobileWorldContentPaths)
            version = try? container.decode(String.self, forKey: CodingKeys.version)
        }
    }
}
