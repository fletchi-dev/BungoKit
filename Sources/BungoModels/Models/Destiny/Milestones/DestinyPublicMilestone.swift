// This File was auto generated by BungoKitGen
//
// File: DestinyPublicMilestone.swift

import Foundation

public extension Destiny.Milestones {
    /// Information about milestones, presented in a character state-agnostic manner. Combine this data with DestinyMilestoneDefinition to get a full picture of the milestone, which is basically a checklist of things to do in the game. Think of this as GetPublicAdvisors 3.0, for those who used the Destiny 1 API.
    struct DestinyPublicMilestone: Codable {
        public var activities: [Destiny.Milestones.DestinyPublicMilestoneChallengeActivity]?
        /// A milestone not need have even a single quest, but if there are active quests they will be returned here.
        public var availableQuests: [Destiny.Milestones.DestinyPublicMilestoneQuest]?
        /// If known, this is the date when the Milestone will expire/recycle/end.
        public var endDate: Date?
        /// The hash identifier for the milestone. Use it to look up the DestinyMilestoneDefinition for static data about the Milestone.
        public var milestoneHash: UInt32?
        /// Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.
        public var order: Int32?
        /// If known, this is the date when the Milestone started/became active.
        public var startDate: Date?
        /// Sometimes milestones - or activities active in milestones - will have relevant vendors. These are the vendors that are currently relevant.
        /// Deprecated, already, for the sake of the new "vendors" property that has more data. What was I thinking.
        public var vendorHashes: [UInt32]?
        /// This is why we can't have nice things. This is the ordered list of vendors to be shown that relate to this milestone, potentially along with other interesting data.
        public var vendors: [Destiny.Milestones.DestinyPublicMilestoneVendor]?

        public enum CodingKeys: String, CodingKey {
            case activities
            case availableQuests
            case endDate
            case milestoneHash
            case order
            case startDate
            case vendorHashes
            case vendors
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            activities = try? container.decode([Destiny.Milestones.DestinyPublicMilestoneChallengeActivity].self, forKey: CodingKeys.activities)
            availableQuests = try? container.decode([Destiny.Milestones.DestinyPublicMilestoneQuest].self, forKey: CodingKeys.availableQuests)
            endDate = try? container.decode(Date.self, forKey: CodingKeys.endDate)
            milestoneHash = try? container.decode(UInt32.self, forKey: CodingKeys.milestoneHash)
            order = try? container.decode(Int32.self, forKey: CodingKeys.order)
            startDate = try? container.decode(Date.self, forKey: CodingKeys.startDate)
            vendorHashes = try? container.decode([UInt32].self, forKey: CodingKeys.vendorHashes)
            vendors = try? container.decode([Destiny.Milestones.DestinyPublicMilestoneVendor].self, forKey: CodingKeys.vendors)
        }
    }
}
