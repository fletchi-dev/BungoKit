// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyFactionDefinition.swift

import Foundation

public extension Destiny.Definitions {
    /// These definitions represent Factions in the game. Factions have ended up unilaterally being related to Vendors that represent them, but that need not necessarily be the case.
    /// A Faction is really just an entity that has a related progression for which a character can gain experience. In Destiny 1, Dead Orbit was an example of a Faction: there happens to be a Vendor that represents Dead Orbit (and indeed, DestinyVendorDefinition.factionHash defines to this relationship), but Dead Orbit could theoretically exist without the Vendor that provides rewards.
    struct DestinyFactionDefinition: Codable {
        public var displayProperties: Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition?

        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.
        public var hash: UInt32?

        /// The index of the entity as it was found in the investment tables.
        public var index: Int32?

        /// The hash identifier for the DestinyProgressionDefinition that indicates the character's relationship with this faction in terms of experience and levels.
        public var progressionHash: UInt32?

        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        public var redacted: Bool?

        /// The faction reward item hash, usually an engram.
        public var rewardItemHash: UInt32?

        /// The faction reward vendor hash, used for faction engram previews.
        public var rewardVendorHash: UInt32?

        /// The faction token item hashes, and their respective progression values.
        public var tokenValues: [UInt32: UInt32]?

        /// List of vendors that are associated with this faction. The last vendor that passes the unlock flag checks is the one that should be shown.
        public var vendors: [Destiny.Definitions.DestinyFactionVendorDefinition]?

        public enum CodingKeys: String, CodingKey {
            case displayProperties
            case hash
            case index
            case progressionHash
            case redacted
            case rewardItemHash
            case rewardVendorHash
            case tokenValues
            case vendors
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            displayProperties = try? container.decode(Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition.self, forKey: CodingKeys.displayProperties)
            hash = try? container.decode(UInt32.self, forKey: CodingKeys.hash)
            index = try? container.decode(Int32.self, forKey: CodingKeys.index)
            progressionHash = try? container.decode(UInt32.self, forKey: CodingKeys.progressionHash)
            redacted = try? container.decode(Bool.self, forKey: CodingKeys.redacted)
            rewardItemHash = try? container.decode(UInt32.self, forKey: CodingKeys.rewardItemHash)
            rewardVendorHash = try? container.decode(UInt32.self, forKey: CodingKeys.rewardVendorHash)
            let rawtokenValues = try? container.decode([String: UInt32].self, forKey: CodingKeys.tokenValues)
            tokenValues = rawtokenValues?.compactMapKeys { key, _ -> UInt32? in
                UInt32(key)
            }
            vendors = try? container.decode([Destiny.Definitions.DestinyFactionVendorDefinition].self, forKey: CodingKeys.vendors)
        }
    }
}
