// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinySeasonPassDefinition.swift

import Foundation

public extension Destiny.Definitions.Seasons {
    struct DestinySeasonPassDefinition: Codable {
        public var displayProperties: Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition?

        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.
        public var hash: UInt32?

        /// The index of the entity as it was found in the investment tables.
        public var index: Int32?

        /// I know what you're thinking, but I promise we're not going to duplicate and drown you. Instead, we're giving you sweet, sweet power bonuses.
        ///  Prestige progression is further progression that you can make on the Season pass after you gain max ranks, that will ultimately increase your power/light level over the theoretical limit.
        public var prestigeProgressionHash: UInt32?

        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        public var redacted: Bool?

        /// This is the progression definition related to the progression for the initial levels 1-100 that provide item rewards for the Season pass. Further experience after you reach the limit is provided in the "Prestige" progression referred to by prestigeProgressionHash.
        public var rewardProgressionHash: UInt32?

        public enum CodingKeys: String, CodingKey {
            case displayProperties
            case hash
            case index
            case prestigeProgressionHash
            case redacted
            case rewardProgressionHash
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            displayProperties = try? container.decode(Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition.self, forKey: CodingKeys.displayProperties)
            hash = try? container.decode(UInt32.self, forKey: CodingKeys.hash)
            index = try? container.decode(Int32.self, forKey: CodingKeys.index)
            prestigeProgressionHash = try? container.decode(UInt32.self, forKey: CodingKeys.prestigeProgressionHash)
            redacted = try? container.decode(Bool.self, forKey: CodingKeys.redacted)
            rewardProgressionHash = try? container.decode(UInt32.self, forKey: CodingKeys.rewardProgressionHash)
        }
    }
}
