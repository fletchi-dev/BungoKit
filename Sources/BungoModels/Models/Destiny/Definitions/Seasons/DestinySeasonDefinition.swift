// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinySeasonDefinition.swift

import Foundation

public extension Destiny.Definitions.Seasons {
    /// Defines a canonical "Season" of Destiny: a range of a few months where the game highlights certain challenges, provides new loot, has new Clan-related rewards and celebrates various seasonal events.
    struct DestinySeasonDefinition: Codable {
        public var artifactItemHash: UInt32?

        public var backgroundImagePath: String?

        public var displayProperties: Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition?

        public var endDate: Date?

        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.
        public var hash: UInt32?

        /// The index of the entity as it was found in the investment tables.
        public var index: Int32?

        /// Optional - Defines the promotional text, images, and links to preview this season.
        public var preview: Destiny.Definitions.Seasons.DestinySeasonPreviewDefinition?

        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        public var redacted: Bool?

        public var sealPresentationNodeHash: UInt32?

        public var seasonNumber: Int32?

        public var seasonPassHash: UInt32?

        public var seasonPassProgressionHash: UInt32?

        public var seasonalChallengesPresentationNodeHash: UInt32?

        public var startDate: Date?

        public enum CodingKeys: String, CodingKey {
            case artifactItemHash
            case backgroundImagePath
            case displayProperties
            case endDate
            case hash
            case index
            case preview
            case redacted
            case sealPresentationNodeHash
            case seasonNumber
            case seasonPassHash
            case seasonPassProgressionHash
            case seasonalChallengesPresentationNodeHash
            case startDate
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            artifactItemHash = try? container.decode(UInt32.self, forKey: CodingKeys.artifactItemHash)
            backgroundImagePath = try? container.decode(String.self, forKey: CodingKeys.backgroundImagePath)
            displayProperties = try? container.decode(Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition.self, forKey: CodingKeys.displayProperties)
            endDate = try? container.decode(Date.self, forKey: CodingKeys.endDate)
            hash = try? container.decode(UInt32.self, forKey: CodingKeys.hash)
            index = try? container.decode(Int32.self, forKey: CodingKeys.index)
            preview = try? container.decode(Destiny.Definitions.Seasons.DestinySeasonPreviewDefinition.self, forKey: CodingKeys.preview)
            redacted = try? container.decode(Bool.self, forKey: CodingKeys.redacted)
            sealPresentationNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.sealPresentationNodeHash)
            seasonNumber = try? container.decode(Int32.self, forKey: CodingKeys.seasonNumber)
            seasonPassHash = try? container.decode(UInt32.self, forKey: CodingKeys.seasonPassHash)
            seasonPassProgressionHash = try? container.decode(UInt32.self, forKey: CodingKeys.seasonPassProgressionHash)
            seasonalChallengesPresentationNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.seasonalChallengesPresentationNodeHash)
            startDate = try? container.decode(Date.self, forKey: CodingKeys.startDate)
        }
    }
}
