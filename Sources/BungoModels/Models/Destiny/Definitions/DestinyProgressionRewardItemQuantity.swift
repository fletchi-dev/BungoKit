// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyProgressionRewardItemQuantity.swift

import Foundation

public extension Destiny.Definitions {
    struct DestinyProgressionRewardItemQuantity: Codable {
        public var acquisitionBehavior: Destiny.DestinyProgressionRewardItemAcquisitionBehavior?

        public var claimUnlockDisplayStrings: [String]?

        /// Indicates that this item quantity may be conditionally shown or hidden, based on various sources of state. For example: server flags, account state, or character progress.
        public var hasConditionalVisibility: Bool?

        /// The hash identifier for the item in question. Use it to look up the item's DestinyInventoryItemDefinition.
        public var itemHash: UInt32?

        /// If this quantity is referring to a specific instance of an item, this will have the item's instance ID. Normally, this will be null.
        public var itemInstanceId: Int64?

        /// The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used.
        public var quantity: Int32?

        public var rewardedAtProgressionLevel: Int32?

        public var uiDisplayStyle: String?

        public enum CodingKeys: String, CodingKey {
            case acquisitionBehavior
            case claimUnlockDisplayStrings
            case hasConditionalVisibility
            case itemHash
            case itemInstanceId
            case quantity
            case rewardedAtProgressionLevel
            case uiDisplayStyle
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            acquisitionBehavior = try? container.decode(Destiny.DestinyProgressionRewardItemAcquisitionBehavior.self, forKey: CodingKeys.acquisitionBehavior)
            claimUnlockDisplayStrings = try? container.decode([String].self, forKey: CodingKeys.claimUnlockDisplayStrings)
            hasConditionalVisibility = try? container.decode(Bool.self, forKey: CodingKeys.hasConditionalVisibility)
            itemHash = try? container.decode(UInt32.self, forKey: CodingKeys.itemHash)
            let itemInstanceId = try? container.decode(String.self, forKey: CodingKeys.itemInstanceId)
            if let itemInstanceId, let itemInstanceIdInt = Int64(itemInstanceId) {
                self.itemInstanceId = itemInstanceIdInt
            } else {
                self.itemInstanceId = nil
            }
            quantity = try? container.decode(Int32.self, forKey: CodingKeys.quantity)
            rewardedAtProgressionLevel = try? container.decode(Int32.self, forKey: CodingKeys.rewardedAtProgressionLevel)
            uiDisplayStyle = try? container.decode(String.self, forKey: CodingKeys.uiDisplayStyle)
        }
    }
}
