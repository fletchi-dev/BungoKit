// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyVendorGroupDefinition.swift

import Foundation

public extension Destiny.Definitions {
    /// BNet attempts to group vendors into similar collections. These groups aren't technically game canonical, but they are helpful for filtering vendors or showing them organized into a clean view on a webpage or app.
    /// These definitions represent the groups we've built. Unlike in Destiny 1, a Vendors' group may change dynamically as the game state changes: thus, you will want to check DestinyVendorComponent responses to find a vendor's currently active Group (if you care).
    /// Using this will let you group your vendors in your UI in a similar manner to how we will do grouping in the Companion.
    struct DestinyVendorGroupDefinition: Codable {
        /// For now, a group just has a name.
        public var categoryName: String?

        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.
        public var hash: UInt32?

        /// The index of the entity as it was found in the investment tables.
        public var index: Int32?

        /// The recommended order in which to render the groups, Ascending order.
        public var order: Int32?

        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        public var redacted: Bool?

        public enum CodingKeys: String, CodingKey {
            case categoryName
            case hash
            case index
            case order
            case redacted
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            categoryName = try? container.decode(String.self, forKey: CodingKeys.categoryName)
            hash = try? container.decode(UInt32.self, forKey: CodingKeys.hash)
            index = try? container.decode(Int32.self, forKey: CodingKeys.index)
            order = try? container.decode(Int32.self, forKey: CodingKeys.order)
            redacted = try? container.decode(Bool.self, forKey: CodingKeys.redacted)
        }
    }
}
