// This File was auto generated by BungoKitGen
//
// File: DestinyProgressionStepDefinition.swift

import Foundation

public extension Destiny.Definitions {
    /// This defines a single Step in a progression (which roughly equates to a level. See DestinyProgressionDefinition for caveats).
    struct DestinyProgressionStepDefinition: Codable {
        /// This appears to be, when you "level up", whether a visual effect will display and on what entity. See DestinyProgressionStepDisplayEffect for slightly more info.
        public var displayEffectType: Destiny.DestinyProgressionStepDisplayEffect?
        /// If this progression step has a specific icon related to it, this is the icon to show.
        public var icon: String?
        /// The total amount of progression points/"experience" you will need to initially reach this step. If this is the last step and the progression is repeating indefinitely (DestinyProgressionDefinition.repeatLastStep), this will also be the progress needed to level it up further by repeating this step again.
        public var progressTotal: Int32?
        /// A listing of items rewarded as a result of reaching this level.
        public var rewardItems: [Destiny.DestinyItemQuantity]?
        /// Very rarely, Progressions will have localized text describing the Level of the progression. This will be that localized text, if it exists. Otherwise, the standard appears to be to simply show the level numerically.
        public var stepName: String?

        public enum CodingKeys: String, CodingKey {
            case displayEffectType
            case icon
            case progressTotal
            case rewardItems
            case stepName
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            displayEffectType = try? container.decode(Destiny.DestinyProgressionStepDisplayEffect.self, forKey: CodingKeys.displayEffectType)
            icon = try? container.decode(String.self, forKey: CodingKeys.icon)
            progressTotal = try? container.decode(Int32.self, forKey: CodingKeys.progressTotal)
            rewardItems = try? container.decode([Destiny.DestinyItemQuantity].self, forKey: CodingKeys.rewardItems)
            stepName = try? container.decode(String.self, forKey: CodingKeys.stepName)
        }
    }
}
