// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyPresentationNodeChildrenBlock.swift

import Foundation

public extension Destiny.Definitions.Presentation {
    /// As/if presentation nodes begin to host more entities as children, these lists will be added to. One list property exists per type of entity that can be treated as a child of this presentation node, and each holds the identifier of the entity and any associated information needed to display the UI for that entity (if anything)
    struct DestinyPresentationNodeChildrenBlock: Codable {
        public var collectibles: [Destiny.Definitions.Presentation.DestinyPresentationNodeCollectibleChildEntry]?

        public var craftables: [Destiny.Definitions.Presentation.DestinyPresentationNodeCraftableChildEntry]?

        public var metrics: [Destiny.Definitions.Presentation.DestinyPresentationNodeMetricChildEntry]?

        public var presentationNodes: [Destiny.Definitions.Presentation.DestinyPresentationNodeChildEntry]?

        public var records: [Destiny.Definitions.Presentation.DestinyPresentationNodeRecordChildEntry]?

        public enum CodingKeys: String, CodingKey {
            case collectibles
            case craftables
            case metrics
            case presentationNodes
            case records
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            collectibles = try? container.decode([Destiny.Definitions.Presentation.DestinyPresentationNodeCollectibleChildEntry].self, forKey: CodingKeys.collectibles)
            craftables = try? container.decode([Destiny.Definitions.Presentation.DestinyPresentationNodeCraftableChildEntry].self, forKey: CodingKeys.craftables)
            metrics = try? container.decode([Destiny.Definitions.Presentation.DestinyPresentationNodeMetricChildEntry].self, forKey: CodingKeys.metrics)
            presentationNodes = try? container.decode([Destiny.Definitions.Presentation.DestinyPresentationNodeChildEntry].self, forKey: CodingKeys.presentationNodes)
            records = try? container.decode([Destiny.Definitions.Presentation.DestinyPresentationNodeRecordChildEntry].self, forKey: CodingKeys.records)
        }
    }
}
