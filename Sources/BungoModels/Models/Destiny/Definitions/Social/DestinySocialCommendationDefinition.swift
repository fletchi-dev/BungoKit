// This File was auto generated by BungoKitGen
//
// File: DestinySocialCommendationDefinition.swift

import Foundation

public extension Destiny.Definitions.Social {
    struct DestinySocialCommendationDefinition: Codable {
        public var activityGivingLimit: Int32?
        public var cardImagePath: String?
        public var color: Destiny.Misc.DestinyColor?
        /// The display properties for the the activities that this commendation is available in.
        public var displayActivities: [Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition]?
        public var displayPriority: Int32?
        public var displayProperties: Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition?
        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.
        public var hash: UInt32?
        /// The index of the entity as it was found in the investment tables.
        public var index: Int32?
        public var parentCommendationNodeHash: UInt32?
        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        public var redacted: Bool?

        public enum CodingKeys: String, CodingKey {
            case activityGivingLimit
            case cardImagePath
            case color
            case displayActivities
            case displayPriority
            case displayProperties
            case hash
            case index
            case parentCommendationNodeHash
            case redacted
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            activityGivingLimit = try? container.decode(Int32.self, forKey: CodingKeys.activityGivingLimit)
            cardImagePath = try? container.decode(String.self, forKey: CodingKeys.cardImagePath)
            color = try? container.decode(Destiny.Misc.DestinyColor.self, forKey: CodingKeys.color)
            displayActivities = try? container.decode([Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition].self, forKey: CodingKeys.displayActivities)
            displayPriority = try? container.decode(Int32.self, forKey: CodingKeys.displayPriority)
            displayProperties = try? container.decode(Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition.self, forKey: CodingKeys.displayProperties)
            hash = try? container.decode(UInt32.self, forKey: CodingKeys.hash)
            index = try? container.decode(Int32.self, forKey: CodingKeys.index)
            parentCommendationNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.parentCommendationNodeHash)
            redacted = try? container.decode(Bool.self, forKey: CodingKeys.redacted)
        }
    }
}
