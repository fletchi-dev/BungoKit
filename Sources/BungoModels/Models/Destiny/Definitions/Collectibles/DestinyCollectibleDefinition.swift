// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyCollectibleDefinition.swift

import Foundation

public extension Destiny.Definitions.Collectibles {
    /// Defines a
    struct DestinyCollectibleDefinition: Codable {
        public var acquisitionInfo: Destiny.Definitions.Collectibles.DestinyCollectibleAcquisitionBlock?

        public var displayProperties: Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition?

        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.
        public var hash: UInt32?

        /// The index of the entity as it was found in the investment tables.
        public var index: Int32?

        public var itemHash: UInt32?

        /// A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
        public var parentNodeHashes: [UInt32]?

        public var presentationInfo: Destiny.Definitions.Presentation.DestinyPresentationChildBlock?

        public var presentationNodeType: Destiny.DestinyPresentationNodeType?

        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        public var redacted: Bool?

        /// Indicates whether the state of this Collectible is determined on a per-character or on an account-wide basis.
        public var scope: Destiny.DestinyScope?

        /// This is a hash identifier we are building on the BNet side in an attempt to let people group collectibles by similar sources.
        /// I can't promise that it's going to be 100% accurate, but if the designers were consistent in assigning the same source strings to items with the same sources, it *ought to* be. No promises though.
        /// This hash also doesn't relate to an actual definition, just to note: we've got nothing useful other than the source string for this data.
        public var sourceHash: UInt32?

        /// A human readable string for a hint about how to acquire the item.
        public var sourceString: String?

        public var stateInfo: Destiny.Definitions.Collectibles.DestinyCollectibleStateBlock?

        public var traitHashes: [UInt32]?

        public var traitIds: [String]?

        public enum CodingKeys: String, CodingKey {
            case acquisitionInfo
            case displayProperties
            case hash
            case index
            case itemHash
            case parentNodeHashes
            case presentationInfo
            case presentationNodeType
            case redacted
            case scope
            case sourceHash
            case sourceString
            case stateInfo
            case traitHashes
            case traitIds
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            acquisitionInfo = try? container.decode(Destiny.Definitions.Collectibles.DestinyCollectibleAcquisitionBlock.self, forKey: CodingKeys.acquisitionInfo)
            displayProperties = try? container.decode(Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition.self, forKey: CodingKeys.displayProperties)
            hash = try? container.decode(UInt32.self, forKey: CodingKeys.hash)
            index = try? container.decode(Int32.self, forKey: CodingKeys.index)
            itemHash = try? container.decode(UInt32.self, forKey: CodingKeys.itemHash)
            parentNodeHashes = try? container.decode([UInt32].self, forKey: CodingKeys.parentNodeHashes)
            presentationInfo = try? container.decode(Destiny.Definitions.Presentation.DestinyPresentationChildBlock.self, forKey: CodingKeys.presentationInfo)
            presentationNodeType = try? container.decode(Destiny.DestinyPresentationNodeType.self, forKey: CodingKeys.presentationNodeType)
            redacted = try? container.decode(Bool.self, forKey: CodingKeys.redacted)
            scope = try? container.decode(Destiny.DestinyScope.self, forKey: CodingKeys.scope)
            sourceHash = try? container.decode(UInt32.self, forKey: CodingKeys.sourceHash)
            sourceString = try? container.decode(String.self, forKey: CodingKeys.sourceString)
            stateInfo = try? container.decode(Destiny.Definitions.Collectibles.DestinyCollectibleStateBlock.self, forKey: CodingKeys.stateInfo)
            traitHashes = try? container.decode([UInt32].self, forKey: CodingKeys.traitHashes)
            traitIds = try? container.decode([String].self, forKey: CodingKeys.traitIds)
        }
    }
}
