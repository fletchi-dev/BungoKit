// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyMedalTierDefinition.swift

import Foundation

public extension Destiny.Definitions {
    /// An artificial construct of our own creation, to try and put some order on top of Medals and keep them from being one giant, unmanageable and unsorted blob of stats.
    /// Unfortunately, we haven't had time to do this evaluation yet in Destiny 2, so we're short on Medal Tiers. This will hopefully be updated over time, if Medals continue to exist.
    struct DestinyMedalTierDefinition: Codable {
        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.
        public var hash: UInt32?

        /// The index of the entity as it was found in the investment tables.
        public var index: Int32?

        /// If you're rendering medals by tier, render them in this order (ascending)
        public var order: Int32?

        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        public var redacted: Bool?

        /// The name of the tier.
        public var tierName: String?

        public enum CodingKeys: String, CodingKey {
            case hash
            case index
            case order
            case redacted
            case tierName
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            hash = try? container.decode(UInt32.self, forKey: CodingKeys.hash)
            index = try? container.decode(Int32.self, forKey: CodingKeys.index)
            order = try? container.decode(Int32.self, forKey: CodingKeys.order)
            redacted = try? container.decode(Bool.self, forKey: CodingKeys.redacted)
            tierName = try? container.decode(String.self, forKey: CodingKeys.tierName)
        }
    }
}
