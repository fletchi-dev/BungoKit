// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyTalentExclusiveGroup.swift

import Foundation

public extension Destiny.Definitions {
    /// As of Destiny 2, nodes can exist as part of "Exclusive Groups". These differ from exclusive sets in that, within the group, many nodes can be activated. But the act of activating any node in the group will cause "opposing" nodes (nodes in groups that are not allowed to be activated at the same time as this group) to deactivate.
    struct DestinyTalentExclusiveGroup: Codable {
        /// The identifier for this exclusive group. Only guaranteed unique within the talent grid, not globally.
        public var groupHash: UInt32?

        /// If this group has an associated piece of lore to show next to it, this will be the identifier for that DestinyLoreDefinition.
        public var loreHash: UInt32?

        /// A quick reference of the talent nodes that are part of this group, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)
        public var nodeHashes: [UInt32]?

        /// A quick reference of Groups whose nodes will be deactivated if any node in this group is activated.
        public var opposingGroupHashes: [UInt32]?

        /// A quick reference of Nodes that will be deactivated if any node in this group is activated, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)
        public var opposingNodeHashes: [UInt32]?

        public enum CodingKeys: String, CodingKey {
            case groupHash
            case loreHash
            case nodeHashes
            case opposingGroupHashes
            case opposingNodeHashes
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            groupHash = try? container.decode(UInt32.self, forKey: CodingKeys.groupHash)
            loreHash = try? container.decode(UInt32.self, forKey: CodingKeys.loreHash)
            nodeHashes = try? container.decode([UInt32].self, forKey: CodingKeys.nodeHashes)
            opposingGroupHashes = try? container.decode([UInt32].self, forKey: CodingKeys.opposingGroupHashes)
            opposingNodeHashes = try? container.decode([UInt32].self, forKey: CodingKeys.opposingNodeHashes)
        }
    }
}
