// This File was auto generated by BungoKitGen
//
// File: DestinyItemCraftingBlockDefinition.swift

import Foundation

public extension Destiny.Definitions {
    /// If an item can have an action performed on it (like "Dismantle"), it will be defined here if you care.
    struct DestinyItemCraftingBlockDefinition: Codable {
        /// A reference to the base material requirements for crafting with this recipe.
        public var baseMaterialRequirements: UInt32?
        /// A list of 'bonus' socket plugs that may be available if certain requirements are met.
        public var bonusPlugs: [Destiny.Definitions.DestinyItemCraftingBlockBonusPlugDefinition]?
        public var failedRequirementStrings: [String]?
        /// A reference to the item definition that is created when crafting with this 'recipe' item.
        public var outputItemHash: UInt32?
        /// A list of socket type hashes that describes which sockets are required for crafting with this recipe.
        public var requiredSocketTypeHashes: [UInt32]?

        public enum CodingKeys: String, CodingKey {
            case baseMaterialRequirements
            case bonusPlugs
            case failedRequirementStrings
            case outputItemHash
            case requiredSocketTypeHashes
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            baseMaterialRequirements = try? container.decode(UInt32.self, forKey: CodingKeys.baseMaterialRequirements)
            bonusPlugs = try? container.decode([Destiny.Definitions.DestinyItemCraftingBlockBonusPlugDefinition].self, forKey: CodingKeys.bonusPlugs)
            failedRequirementStrings = try? container.decode([String].self, forKey: CodingKeys.failedRequirementStrings)
            outputItemHash = try? container.decode(UInt32.self, forKey: CodingKeys.outputItemHash)
            requiredSocketTypeHashes = try? container.decode([UInt32].self, forKey: CodingKeys.requiredSocketTypeHashes)
        }
    }
}
