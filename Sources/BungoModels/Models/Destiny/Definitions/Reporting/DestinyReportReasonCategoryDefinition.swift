// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyReportReasonCategoryDefinition.swift

import Foundation

public extension Destiny.Definitions.Reporting {
    /// If you're going to report someone for a Terms of Service violation, you need to choose a category and reason for the report. This definition holds both the categories and the reasons within those categories, for simplicity and my own laziness' sake.
    /// Note tha this means that, to refer to a Reason by reasonHash, you need a combination of the reasonHash *and* the associated ReasonCategory's hash: there are some reasons defined under multiple categories.
    struct DestinyReportReasonCategoryDefinition: Codable {
        public var displayProperties: Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition?

        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.
        public var hash: UInt32?

        /// The index of the entity as it was found in the investment tables.
        public var index: Int32?

        /// The specific reasons for the report under this category.
        public var reasons: [UInt32: Destiny.Definitions.Reporting.DestinyReportReasonDefinition]?

        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        public var redacted: Bool?

        public enum CodingKeys: String, CodingKey {
            case displayProperties
            case hash
            case index
            case reasons
            case redacted
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            displayProperties = try? container.decode(Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition.self, forKey: CodingKeys.displayProperties)
            hash = try? container.decode(UInt32.self, forKey: CodingKeys.hash)
            index = try? container.decode(Int32.self, forKey: CodingKeys.index)
            let rawreasons = try? container.decode([String: Destiny.Definitions.Reporting.DestinyReportReasonDefinition].self, forKey: CodingKeys.reasons)
            reasons = rawreasons?.compactMapKeys { key, _ -> UInt32? in
                UInt32(key)
            }
            redacted = try? container.decode(Bool.self, forKey: CodingKeys.redacted)
        }
    }
}
