// This File was auto generated by BungoKitGen
//
// File: DestinyMetricDefinition.swift

import Foundation

public extension Destiny.Definitions.Metrics {
    struct DestinyMetricDefinition: Codable {
        public var displayProperties: Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition?
        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
        /// When entities refer to each other in Destiny content, it is this hash that they are referring to.
        public var hash: UInt32?
        /// The index of the entity as it was found in the investment tables.
        public var index: Int32?
        public var lowerValueIsBetter: Bool?
        /// A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
        public var parentNodeHashes: [UInt32]?
        public var presentationNodeType: Destiny.DestinyPresentationNodeType?
        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        public var redacted: Bool?
        public var trackingObjectiveHash: UInt32?
        public var traitHashes: [UInt32]?
        public var traitIds: [String]?

        public enum CodingKeys: String, CodingKey {
            case displayProperties
            case hash
            case index
            case lowerValueIsBetter
            case parentNodeHashes
            case presentationNodeType
            case redacted
            case trackingObjectiveHash
            case traitHashes
            case traitIds
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            displayProperties = try? container.decode(Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition.self, forKey: CodingKeys.displayProperties)
            hash = try? container.decode(UInt32.self, forKey: CodingKeys.hash)
            index = try? container.decode(Int32.self, forKey: CodingKeys.index)
            lowerValueIsBetter = try? container.decode(Bool.self, forKey: CodingKeys.lowerValueIsBetter)
            parentNodeHashes = try? container.decode([UInt32].self, forKey: CodingKeys.parentNodeHashes)
            presentationNodeType = try? container.decode(Destiny.DestinyPresentationNodeType.self, forKey: CodingKeys.presentationNodeType)
            redacted = try? container.decode(Bool.self, forKey: CodingKeys.redacted)
            trackingObjectiveHash = try? container.decode(UInt32.self, forKey: CodingKeys.trackingObjectiveHash)
            traitHashes = try? container.decode([UInt32].self, forKey: CodingKeys.traitHashes)
            traitIds = try? container.decode([String].self, forKey: CodingKeys.traitIds)
        }
    }
}
