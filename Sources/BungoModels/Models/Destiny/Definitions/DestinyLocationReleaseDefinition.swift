// This File was auto generated by BungoKitGen
//
// File: DestinyLocationReleaseDefinition.swift

import Foundation

public extension Destiny.Definitions {
    /// A specific "spot" referred to by a location. Only one of these can be active at a time for a given Location.
    struct DestinyLocationReleaseDefinition: Codable {
        /// The Activity Bubble within the Destination. Look this up in the DestinyDestinationDefinition's bubbles and bubbleSettings properties.
        public var activityBubbleName: UInt32?
        /// The Activity Graph being pointed to by this location.
        public var activityGraphHash: UInt32?
        /// The Activity Graph Node being pointed to by this location. (Remember that Activity Graph Node hashes are only unique within an Activity Graph: so use the combination to find the node being spoken of)
        public var activityGraphNodeHash: UInt32?
        /// The Activity being pointed to by this location.
        public var activityHash: UInt32?
        /// If we had map information, this would tell us something cool about the path this location wants you to take. I wish we had map information.
        public var activityPathBundle: UInt32?
        /// If we had map information, this would tell us about path information related to destination on the map. Sad. Maybe you can do something cool with it. Go to town man.
        public var activityPathDestination: UInt32?
        /// The Destination being pointed to by this location.
        public var destinationHash: UInt32?
        /// Sadly, these don't appear to be populated anymore (ever?)
        public var displayProperties: Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition?
        public var largeTransparentIcon: String?
        public var mapIcon: String?
        /// The type of Nav Point that this represents. See the enumeration for more info.
        public var navPointType: Destiny.DestinyActivityNavPointType?
        public var smallTransparentIcon: String?
        /// If we had map information, this spawnPoint would be interesting. But sadly, we don't have that info.
        public var spawnPoint: UInt32?
        /// Looks like it should be the position on the map, but sadly it does not look populated... yet?
        public var worldPosition: [Int32]?

        public enum CodingKeys: String, CodingKey {
            case activityBubbleName
            case activityGraphHash
            case activityGraphNodeHash
            case activityHash
            case activityPathBundle
            case activityPathDestination
            case destinationHash
            case displayProperties
            case largeTransparentIcon
            case mapIcon
            case navPointType
            case smallTransparentIcon
            case spawnPoint
            case worldPosition
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            activityBubbleName = try? container.decode(UInt32.self, forKey: CodingKeys.activityBubbleName)
            activityGraphHash = try? container.decode(UInt32.self, forKey: CodingKeys.activityGraphHash)
            activityGraphNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.activityGraphNodeHash)
            activityHash = try? container.decode(UInt32.self, forKey: CodingKeys.activityHash)
            activityPathBundle = try? container.decode(UInt32.self, forKey: CodingKeys.activityPathBundle)
            activityPathDestination = try? container.decode(UInt32.self, forKey: CodingKeys.activityPathDestination)
            destinationHash = try? container.decode(UInt32.self, forKey: CodingKeys.destinationHash)
            displayProperties = try? container.decode(Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition.self, forKey: CodingKeys.displayProperties)
            largeTransparentIcon = try? container.decode(String.self, forKey: CodingKeys.largeTransparentIcon)
            mapIcon = try? container.decode(String.self, forKey: CodingKeys.mapIcon)
            navPointType = try? container.decode(Destiny.DestinyActivityNavPointType.self, forKey: CodingKeys.navPointType)
            smallTransparentIcon = try? container.decode(String.self, forKey: CodingKeys.smallTransparentIcon)
            spawnPoint = try? container.decode(UInt32.self, forKey: CodingKeys.spawnPoint)
            worldPosition = try? container.decode([Int32].self, forKey: CodingKeys.worldPosition)
        }
    }
}
