// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyVendorInteractionDefinition.swift

import Foundation

public extension Destiny.Definitions {
    /// A Vendor Interaction is a dialog shown by the vendor other than sale items or transfer screens. The vendor is showing you something, and asking you to reply to it by choosing an option or reward.
    struct DestinyVendorInteractionDefinition: Codable {
        /// If the vendor interaction has flavor text, this is some of it.
        public var flavorLineOne: String?

        /// If the vendor interaction has flavor text, this is the rest of it.
        public var flavorLineTwo: String?

        /// The header for the interaction dialog.
        public var headerDisplayProperties: Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition?

        /// The localized text telling the player what to do when they see this dialog.
        public var instructions: String?

        /// The position of this interaction in its parent array. Note that this is NOT content agnostic, and should not be used as such.
        public var interactionIndex: Int32?

        /// The enumerated version of the possible UI hints for vendor interactions, which is a little easier to grok than the hash found in uiInteractionType.
        public var interactionType: Destiny.VendorInteractionType?

        /// If this interaction dialog is about a quest, this is the questline related to the interaction. You can use this to show the quest overview, or even the character's status with the quest if you use it to find the character's current Quest Step by checking their inventory against this questlineItemHash's DestinyInventoryItemDefinition.setData.
        public var questlineItemHash: UInt32?

        /// The potential replies that the user can make to the interaction.
        public var replies: [Destiny.Definitions.DestinyVendorInteractionReplyDefinition]?

        /// If this interaction is displaying rewards, this is the text to use for the header of the reward-displaying section of the interaction.
        public var rewardBlockLabel: String?

        /// If the vendor's reward list is sourced from one of his categories, this is the index into the category array of items to show.
        public var rewardVendorCategoryIndex: Int32?

        /// If this interaction is meant to show you sacks, this is the list of types of sacks to be shown. If empty, the interaction is not meant to show sacks.
        public var sackInteractionList: [Destiny.Definitions.DestinyVendorInteractionSackEntryDefinition]?

        /// A UI hint for the behavior of the interaction screen. This is useful to determine what type of interaction is occurring, such as a prompt to receive a rank up reward or a prompt to choose a reward for completing a quest. The hash isn't as useful as the Enum in retrospect, well what can you do. Try using interactionType instead.
        public var uiInteractionType: UInt32?

        /// If >= 0, this is the category of sale items to show along with this interaction dialog.
        public var vendorCategoryIndex: Int32?

        public enum CodingKeys: String, CodingKey {
            case flavorLineOne
            case flavorLineTwo
            case headerDisplayProperties
            case instructions
            case interactionIndex
            case interactionType
            case questlineItemHash
            case replies
            case rewardBlockLabel
            case rewardVendorCategoryIndex
            case sackInteractionList
            case uiInteractionType
            case vendorCategoryIndex
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            flavorLineOne = try? container.decode(String.self, forKey: CodingKeys.flavorLineOne)
            flavorLineTwo = try? container.decode(String.self, forKey: CodingKeys.flavorLineTwo)
            headerDisplayProperties = try? container.decode(Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition.self, forKey: CodingKeys.headerDisplayProperties)
            instructions = try? container.decode(String.self, forKey: CodingKeys.instructions)
            interactionIndex = try? container.decode(Int32.self, forKey: CodingKeys.interactionIndex)
            interactionType = try? container.decode(Destiny.VendorInteractionType.self, forKey: CodingKeys.interactionType)
            questlineItemHash = try? container.decode(UInt32.self, forKey: CodingKeys.questlineItemHash)
            replies = try? container.decode([Destiny.Definitions.DestinyVendorInteractionReplyDefinition].self, forKey: CodingKeys.replies)
            rewardBlockLabel = try? container.decode(String.self, forKey: CodingKeys.rewardBlockLabel)
            rewardVendorCategoryIndex = try? container.decode(Int32.self, forKey: CodingKeys.rewardVendorCategoryIndex)
            sackInteractionList = try? container.decode([Destiny.Definitions.DestinyVendorInteractionSackEntryDefinition].self, forKey: CodingKeys.sackInteractionList)
            uiInteractionType = try? container.decode(UInt32.self, forKey: CodingKeys.uiInteractionType)
            vendorCategoryIndex = try? container.decode(Int32.self, forKey: CodingKeys.vendorCategoryIndex)
        }
    }
}
