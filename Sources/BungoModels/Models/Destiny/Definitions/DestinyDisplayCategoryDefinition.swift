// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyDisplayCategoryDefinition.swift

import Foundation

public extension Destiny.Definitions {
    /// Display Categories are different from "categories" in that these are specifically for visual grouping and display of categories in Vendor UI. The "categories" structure is for validation of the contained items, and can be categorized entirely separately from "Display Categories", there need be and often will be no meaningful relationship between the two.
    struct DestinyDisplayCategoryDefinition: Codable {
        public var displayCategoryHash: UInt32?

        /// If true, this category should be displayed in the "Banner" section of the vendor's UI.
        public var displayInBanner: Bool?

        public var displayProperties: Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition?

        /// An indicator of how the category will be displayed in the UI. It's up to you to do something cool or interesting in response to this, or just to treat it as a normal category.
        public var displayStyleHash: UInt32?

        /// An indicator of how the category will be displayed in the UI. It's up to you to do something cool or interesting in response to this, or just to treat it as a normal category.
        public var displayStyleIdentifier: String?

        /// A string identifier for the display category.
        public var identifier: String?

        public var index: Int32?

        /// If it exists, this is the hash identifier of a DestinyProgressionDefinition that represents the progression to show on this display category.
        /// Specific categories can now have thier own distinct progression, apparently. So that's cool.
        public var progressionHash: UInt32?

        /// If this category sorts items in a nonstandard way, this will be the way we sort.
        public var sortOrder: Destiny.VendorDisplayCategorySortOrder?

        public enum CodingKeys: String, CodingKey {
            case displayCategoryHash
            case displayInBanner
            case displayProperties
            case displayStyleHash
            case displayStyleIdentifier
            case identifier
            case index
            case progressionHash
            case sortOrder
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            displayCategoryHash = try? container.decode(UInt32.self, forKey: CodingKeys.displayCategoryHash)
            displayInBanner = try? container.decode(Bool.self, forKey: CodingKeys.displayInBanner)
            displayProperties = try? container.decode(Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition.self, forKey: CodingKeys.displayProperties)
            displayStyleHash = try? container.decode(UInt32.self, forKey: CodingKeys.displayStyleHash)
            displayStyleIdentifier = try? container.decode(String.self, forKey: CodingKeys.displayStyleIdentifier)
            identifier = try? container.decode(String.self, forKey: CodingKeys.identifier)
            index = try? container.decode(Int32.self, forKey: CodingKeys.index)
            progressionHash = try? container.decode(UInt32.self, forKey: CodingKeys.progressionHash)
            sortOrder = try? container.decode(Destiny.VendorDisplayCategorySortOrder.self, forKey: CodingKeys.sortOrder)
        }
    }
}
