// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyMilestoneRewardCategoryDefinition.swift

import Foundation

public extension Destiny.Definitions.Milestones {
    /// The definition of a category of rewards, that contains many individual rewards.
    struct DestinyMilestoneRewardCategoryDefinition: Codable {
        /// Identifies the reward category. Only guaranteed unique within this specific component!
        public var categoryHash: UInt32?

        /// The string identifier for the category, if you want to use it for some end. Guaranteed unique within the specific component.
        public var categoryIdentifier: String?

        /// Hopefully this is obvious by now.
        public var displayProperties: Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition?

        /// If you want to use BNet's recommended order for rendering categories programmatically, use this value and compare it to other categories to determine the order in which they should be rendered. I don't feel great about putting this here, I won't lie.
        public var order: Int32?

        /// If this milestone can provide rewards, this will define the sets of rewards that can be earned, the conditions under which they can be acquired, internal data that we'll use at runtime to determine whether you've already earned or redeemed this set of rewards, and the category that this reward should be placed under.
        public var rewardEntries: [UInt32: Destiny.Definitions.Milestones.DestinyMilestoneRewardEntryDefinition]?

        public enum CodingKeys: String, CodingKey {
            case categoryHash
            case categoryIdentifier
            case displayProperties
            case order
            case rewardEntries
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            categoryHash = try? container.decode(UInt32.self, forKey: CodingKeys.categoryHash)
            categoryIdentifier = try? container.decode(String.self, forKey: CodingKeys.categoryIdentifier)
            displayProperties = try? container.decode(Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition.self, forKey: CodingKeys.displayProperties)
            order = try? container.decode(Int32.self, forKey: CodingKeys.order)
            let rawrewardEntries = try? container.decode([String: Destiny.Definitions.Milestones.DestinyMilestoneRewardEntryDefinition].self, forKey: CodingKeys.rewardEntries)
            rewardEntries = rawrewardEntries?.compactMapKeys { key, _ -> UInt32? in
                UInt32(key)
            }
        }
    }
}
