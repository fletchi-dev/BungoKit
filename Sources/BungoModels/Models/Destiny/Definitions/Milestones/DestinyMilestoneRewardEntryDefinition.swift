// This File was auto generated by BungoKitGen
//
// File: DestinyMilestoneRewardEntryDefinition.swift

import Foundation

public extension Destiny.Definitions.Milestones {
    /// The definition of a specific reward, which may be contained in a category of rewards and that has optional information about how it is obtained.
    struct DestinyMilestoneRewardEntryDefinition: Codable {
        /// For us to bother returning this info, we should be able to return some kind of information about why these rewards are grouped together. This is ideally that information. Look at how confident I am that this will always remain true.
        public var displayProperties: Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition?
        /// The items you will get as rewards, and how much of it you'll get.
        public var items: [Destiny.DestinyItemQuantity]?
        /// If you want to follow BNet's ordering of these rewards, use this number within a given category to order the rewards. Yeah, I know. I feel dirty too.
        public var order: Int32?
        /// The identifier for this reward entry. Runtime data will refer to reward entries by this hash. Only guaranteed unique within the specific Milestone.
        public var rewardEntryHash: UInt32?
        /// The string identifier, if you care about it. Only guaranteed unique within the specific Milestone.
        public var rewardEntryIdentifier: String?
        /// If this reward is redeemed at a Vendor, this is the hash of the Vendor to go to in order to redeem the reward. Use this hash to look up the DestinyVendorDefinition.
        public var vendorHash: UInt32?

        public enum CodingKeys: String, CodingKey {
            case displayProperties
            case items
            case order
            case rewardEntryHash
            case rewardEntryIdentifier
            case vendorHash
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            displayProperties = try? container.decode(Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition.self, forKey: CodingKeys.displayProperties)
            items = try? container.decode([Destiny.DestinyItemQuantity].self, forKey: CodingKeys.items)
            order = try? container.decode(Int32.self, forKey: CodingKeys.order)
            rewardEntryHash = try? container.decode(UInt32.self, forKey: CodingKeys.rewardEntryHash)
            rewardEntryIdentifier = try? container.decode(String.self, forKey: CodingKeys.rewardEntryIdentifier)
            vendorHash = try? container.decode(UInt32.self, forKey: CodingKeys.vendorHash)
        }
    }
}
