// This File was auto generated by BungoKitGen
//
// File: DestinyEquippingBlockDefinition.swift

import Foundation

public extension Destiny.Definitions {
    /// Items that can be equipped define this block. It contains information we need to understand how and when the item can be equipped.
    struct DestinyEquippingBlockDefinition: Codable {
        /// Ammo type used by a weapon is no longer determined by the bucket in which it is contained. If the item has an ammo type - i.e. if it is a weapon - this will be the type of ammunition expected.
        public var ammoType: Destiny.DestinyAmmunitionType?
        /// These are custom attributes on the equippability of the item.
        /// For now, this can only be "equip on acquire", which would mean that the item will be automatically equipped as soon as you pick it up.
        public var attributes: Destiny.EquippingItemBlockAttributes?
        /// These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.
        public var displayStrings: [String]?
        /// An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.
        public var equipmentSlotTypeHash: UInt32?
        /// If the item is part of a gearset, this is a reference to that gearset item.
        public var gearsetItemHash: UInt32?
        /// If defined, this is the label used to check if the item has other items of matching types already equipped.
        /// For instance, when you aren't allowed to equip more than one Exotic Weapon, that's because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item's uniqueLabel vs. all other already equipped items (other than the item in the slot that's about to be occupied).
        public var uniqueLabel: String?
        /// The hash of that unique label. Does not point to a specific definition.
        public var uniqueLabelHash: UInt32?

        public enum CodingKeys: String, CodingKey {
            case ammoType
            case attributes
            case displayStrings
            case equipmentSlotTypeHash
            case gearsetItemHash
            case uniqueLabel
            case uniqueLabelHash
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            ammoType = try? container.decode(Destiny.DestinyAmmunitionType.self, forKey: CodingKeys.ammoType)
            attributes = try? container.decode(Destiny.EquippingItemBlockAttributes.self, forKey: CodingKeys.attributes)
            displayStrings = try? container.decode([String].self, forKey: CodingKeys.displayStrings)
            equipmentSlotTypeHash = try? container.decode(UInt32.self, forKey: CodingKeys.equipmentSlotTypeHash)
            gearsetItemHash = try? container.decode(UInt32.self, forKey: CodingKeys.gearsetItemHash)
            uniqueLabel = try? container.decode(String.self, forKey: CodingKeys.uniqueLabel)
            uniqueLabelHash = try? container.decode(UInt32.self, forKey: CodingKeys.uniqueLabelHash)
        }
    }
}
