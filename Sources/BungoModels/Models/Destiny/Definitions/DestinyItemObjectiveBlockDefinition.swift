// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyItemObjectiveBlockDefinition.swift

import Foundation

public extension Destiny.Definitions {
    /// An item can have objectives on it. In practice, these are the exclusive purview of "Quest Step" items: DestinyInventoryItemDefinitions that represent a specific step in a Quest.
    /// Quest steps have 1:M objectives that we end up processing and returning in live data as DestinyQuestStatus data, and other useful information.
    struct DestinyItemObjectiveBlockDefinition: Codable {
        /// For every entry in objectiveHashes, there is a corresponding entry in this array at the same index. If the objective is meant to be associated with a specific DestinyActivityDefinition, there will be a valid hash at that index. Otherwise, it will be invalid (0).
        /// Rendered somewhat obsolete by perObjectiveDisplayProperties, which currently has much the same information but may end up with more info in the future.
        public var displayActivityHashes: [UInt32]?

        public var displayAsStatTracker: Bool?

        /// The localized string for narrative text related to this quest step, if any.
        public var narrative: String?

        /// The hashes to Objectives (DestinyObjectiveDefinition) that are part of this Quest Step, in the order that they should be rendered.
        public var objectiveHashes: [UInt32]?

        /// The localized string describing an action to be performed associated with the objectives, if any.
        public var objectiveVerbName: String?

        /// One entry per Objective on the item, it will have related display information.
        public var perObjectiveDisplayProperties: [Destiny.Definitions.DestinyObjectiveDisplayProperties]?

        /// A hashed value for the questTypeIdentifier, because apparently I like to be redundant.
        public var questTypeHash: UInt32?

        /// The identifier for the type of quest being performed, if any. Not associated with any fixed definition, yet.
        public var questTypeIdentifier: String?

        /// The hash for the DestinyInventoryItemDefinition representing the Quest to which this Quest Step belongs.
        public var questlineItemHash: UInt32?

        /// If True, all objectives must be completed for the step to be completed. If False, any one objective can be completed for the step to be completed.
        public var requireFullObjectiveCompletion: Bool?

        public enum CodingKeys: String, CodingKey {
            case displayActivityHashes
            case displayAsStatTracker
            case narrative
            case objectiveHashes
            case objectiveVerbName
            case perObjectiveDisplayProperties
            case questTypeHash
            case questTypeIdentifier
            case questlineItemHash
            case requireFullObjectiveCompletion
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            displayActivityHashes = try? container.decode([UInt32].self, forKey: CodingKeys.displayActivityHashes)
            displayAsStatTracker = try? container.decode(Bool.self, forKey: CodingKeys.displayAsStatTracker)
            narrative = try? container.decode(String.self, forKey: CodingKeys.narrative)
            objectiveHashes = try? container.decode([UInt32].self, forKey: CodingKeys.objectiveHashes)
            objectiveVerbName = try? container.decode(String.self, forKey: CodingKeys.objectiveVerbName)
            perObjectiveDisplayProperties = try? container.decode([Destiny.Definitions.DestinyObjectiveDisplayProperties].self, forKey: CodingKeys.perObjectiveDisplayProperties)
            questTypeHash = try? container.decode(UInt32.self, forKey: CodingKeys.questTypeHash)
            questTypeIdentifier = try? container.decode(String.self, forKey: CodingKeys.questTypeIdentifier)
            questlineItemHash = try? container.decode(UInt32.self, forKey: CodingKeys.questlineItemHash)
            requireFullObjectiveCompletion = try? container.decode(Bool.self, forKey: CodingKeys.requireFullObjectiveCompletion)
        }
    }
}
