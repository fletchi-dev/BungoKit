// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyActivityGraphNodeDefinition.swift

import Foundation

public extension Destiny.Definitions.Director {
    /// This is the position and other data related to nodes in the activity graph that you can click to launch activities. An Activity Graph node will only have one active Activity at a time, which will determine the activity to be launched (and, unless overrideDisplay information is provided, will also determine the tooltip and other UI related to the node)
    struct DestinyActivityGraphNodeDefinition: Codable {
        /// The node may have various possible activities that could be active for it, however only one may be active at a time. See the DestinyActivityGraphNodeActivityDefinition for details.
        public var activities: [Destiny.Definitions.Director.DestinyActivityGraphNodeActivityDefinition]?

        /// The node may have various visual accents placed on it, or styles applied. These are the list of possible styles that the Node can have. The game iterates through each, looking for the first one that passes a check of the required game/character/account state in order to show that style, and then renders the node in that style.
        public var featuringStates: [Destiny.Definitions.Director.DestinyActivityGraphNodeFeaturingStateDefinition]?

        /// An identifier for the Activity Graph Node, only guaranteed to be unique within its parent Activity Graph.
        public var nodeId: UInt32?

        /// The node *may* have display properties that override the active Activity's display properties.
        public var overrideDisplay: Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition?

        /// The position on the map for this node.
        public var position: Destiny.Definitions.Common.DestinyPositionDefinition?

        /// Represents possible states that the graph node can be in. These are combined with some checking that happens in the game client and server to determine which state is actually active at any given time.
        public var states: [Destiny.Definitions.Director.DestinyActivityGraphNodeStateEntry]?

        public enum CodingKeys: String, CodingKey {
            case activities
            case featuringStates
            case nodeId
            case overrideDisplay
            case position
            case states
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            activities = try? container.decode([Destiny.Definitions.Director.DestinyActivityGraphNodeActivityDefinition].self, forKey: CodingKeys.activities)
            featuringStates = try? container.decode([Destiny.Definitions.Director.DestinyActivityGraphNodeFeaturingStateDefinition].self, forKey: CodingKeys.featuringStates)
            nodeId = try? container.decode(UInt32.self, forKey: CodingKeys.nodeId)
            overrideDisplay = try? container.decode(Destiny.Definitions.Common.DestinyDisplayPropertiesDefinition.self, forKey: CodingKeys.overrideDisplay)
            position = try? container.decode(Destiny.Definitions.Common.DestinyPositionDefinition.self, forKey: CodingKeys.position)
            states = try? container.decode([Destiny.Definitions.Director.DestinyActivityGraphNodeStateEntry].self, forKey: CodingKeys.states)
        }
    }
}
