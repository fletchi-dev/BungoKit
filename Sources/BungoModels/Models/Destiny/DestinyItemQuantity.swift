// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyItemQuantity.swift

import Foundation

public extension Destiny {
    /// Used in a number of Destiny contracts to return data about an item stack and its quantity. Can optionally return an itemInstanceId if the item is instanced - in which case, the quantity returned will be 1. If it's not... uh, let me know okay? Thanks.
    struct DestinyItemQuantity: Codable {
        /// Indicates that this item quantity may be conditionally shown or hidden, based on various sources of state. For example: server flags, account state, or character progress.
        public var hasConditionalVisibility: Bool?

        /// The hash identifier for the item in question. Use it to look up the item's DestinyInventoryItemDefinition.
        public var itemHash: UInt32?

        /// If this quantity is referring to a specific instance of an item, this will have the item's instance ID. Normally, this will be null.
        public var itemInstanceId: Int64?

        /// The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used.
        public var quantity: Int32?

        public enum CodingKeys: String, CodingKey {
            case hasConditionalVisibility
            case itemHash
            case itemInstanceId
            case quantity
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            hasConditionalVisibility = try? container.decode(Bool.self, forKey: CodingKeys.hasConditionalVisibility)
            itemHash = try? container.decode(UInt32.self, forKey: CodingKeys.itemHash)
            let itemInstanceId = try? container.decode(String.self, forKey: CodingKeys.itemInstanceId)
            if let itemInstanceId, let itemInstanceIdInt = Int64(itemInstanceId) {
                self.itemInstanceId = itemInstanceIdInt
            } else {
                self.itemInstanceId = nil
            }
            quantity = try? container.decode(Int32.self, forKey: CodingKeys.quantity)
        }
    }
}
