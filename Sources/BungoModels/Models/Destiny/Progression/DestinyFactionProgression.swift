// This File was auto generated by BungoKitGen
//
// File: DestinyFactionProgression.swift

import Foundation

public extension Destiny.Progression {
    /// Mostly for historical purposes, we segregate Faction progressions from other progressions. This is just a DestinyProgression with a shortcut for finding the DestinyFactionDefinition of the faction related to the progression.
    struct DestinyFactionProgression: Codable {
        /// This is the total amount of progress obtained overall for this progression (for instance, the total amount of Character Level experience earned)
        public var currentProgress: Int32?
        /// The number of resets of this progression you've executed this season, if applicable to this progression.
        public var currentResetCount: Int32?
        /// If this progression has a daily limit, this is that limit.
        public var dailyLimit: Int32?
        /// The amount of progress earned today for this progression.
        public var dailyProgress: Int32?
        /// The hash identifier of the Faction related to this progression. Use it to look up the DestinyFactionDefinition for more rendering info.
        public var factionHash: UInt32?
        /// The index of the Faction vendor that is currently available. Will be set to -1 if no vendors are available.
        public var factionVendorIndex: Int32?
        /// This is the level of the progression (for instance, the Character Level).
        public var level: Int32?
        /// This is the maximum possible level you can achieve for this progression (for example, the maximum character level obtainable)
        public var levelCap: Int32?
        /// The total amount of progression (i.e. "Experience") needed in order to reach the next level.
        public var nextLevelAt: Int32?
        /// The amount of progression (i.e. "Experience") needed to reach the next level of this Progression. Jeez, progression is such an overloaded word.
        public var progressToNextLevel: Int32?
        /// The hash identifier of the Progression in question. Use it to look up the DestinyProgressionDefinition in static data.
        public var progressionHash: UInt32?
        /// Information about historical rewards for this progression, if there is any data for it.
        public var rewardItemStates: [Destiny.DestinyProgressionRewardItemState]?
        /// Information about historical resets of this progression, if there is any data for it.
        public var seasonResets: [Destiny.DestinyProgressionResetEntry]?
        /// Progressions define their levels in "steps". Since the last step may be repeatable, the user may be at a higher level than the actual Step achieved in the progression. Not necessarily useful, but potentially interesting for those cruising the API. Relate this to the "steps" property of the DestinyProgression to see which step the user is on, if you care about that. (Note that this is Content Version dependent since it refers to indexes.)
        public var stepIndex: Int32?
        /// If this progression has a weekly limit, this is that limit.
        public var weeklyLimit: Int32?
        /// The amount of progress earned toward this progression in the current week.
        public var weeklyProgress: Int32?

        public enum CodingKeys: String, CodingKey {
            case currentProgress
            case currentResetCount
            case dailyLimit
            case dailyProgress
            case factionHash
            case factionVendorIndex
            case level
            case levelCap
            case nextLevelAt
            case progressToNextLevel
            case progressionHash
            case rewardItemStates
            case seasonResets
            case stepIndex
            case weeklyLimit
            case weeklyProgress
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            currentProgress = try? container.decode(Int32.self, forKey: CodingKeys.currentProgress)
            currentResetCount = try? container.decode(Int32.self, forKey: CodingKeys.currentResetCount)
            dailyLimit = try? container.decode(Int32.self, forKey: CodingKeys.dailyLimit)
            dailyProgress = try? container.decode(Int32.self, forKey: CodingKeys.dailyProgress)
            factionHash = try? container.decode(UInt32.self, forKey: CodingKeys.factionHash)
            factionVendorIndex = try? container.decode(Int32.self, forKey: CodingKeys.factionVendorIndex)
            level = try? container.decode(Int32.self, forKey: CodingKeys.level)
            levelCap = try? container.decode(Int32.self, forKey: CodingKeys.levelCap)
            nextLevelAt = try? container.decode(Int32.self, forKey: CodingKeys.nextLevelAt)
            progressToNextLevel = try? container.decode(Int32.self, forKey: CodingKeys.progressToNextLevel)
            progressionHash = try? container.decode(UInt32.self, forKey: CodingKeys.progressionHash)
            rewardItemStates = try? container.decode([Destiny.DestinyProgressionRewardItemState].self, forKey: CodingKeys.rewardItemStates)
            seasonResets = try? container.decode([Destiny.DestinyProgressionResetEntry].self, forKey: CodingKeys.seasonResets)
            stepIndex = try? container.decode(Int32.self, forKey: CodingKeys.stepIndex)
            weeklyLimit = try? container.decode(Int32.self, forKey: CodingKeys.weeklyLimit)
            weeklyProgress = try? container.decode(Int32.self, forKey: CodingKeys.weeklyProgress)
        }
    }
}
