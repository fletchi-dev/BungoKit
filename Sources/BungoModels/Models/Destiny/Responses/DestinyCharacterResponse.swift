// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyCharacterResponse.swift

import Foundation

public extension Destiny.Responses {
    /// The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data.
    struct DestinyCharacterResponse: Codable {
        /// Activity data - info about current activities available to the player.
        /// COMPONENT TYPE: CharacterActivities
        public var activities: SingleComponentResponse<Destiny.Entities.Characters.DestinyCharacterActivitiesComponent>?

        /// Base information about the character in question.
        /// COMPONENT TYPE: Characters
        public var character: SingleComponentResponse<Destiny.Entities.Characters.DestinyCharacterComponent>?

        /// COMPONENT TYPE: Collectibles
        public var collectibles: SingleComponentResponse<Destiny.Components.Collectibles.DestinyCollectiblesComponent>?

        /// A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
        /// COMPONENT TYPE: CurrencyLookups
        public var currencyLookups: SingleComponentResponse<Destiny.Components.Inventory.DestinyCurrenciesComponent>?

        /// Equipped items on the character.
        /// COMPONENT TYPE: CharacterEquipment
        public var equipment: SingleComponentResponse<Destiny.Entities.Inventory.DestinyInventoryComponent>?

        /// The character-level non-equipped inventory items.
        /// COMPONENT TYPE: CharacterInventories
        public var inventory: SingleComponentResponse<Destiny.Entities.Inventory.DestinyInventoryComponent>?

        /// The set of components belonging to the player's instanced items.
        /// COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
        public var itemComponents: DestinyItemComponentSetOfint64?

        /// Items available from Kiosks that are available to this specific character.
        /// COMPONENT TYPE: Kiosks
        public var kiosks: SingleComponentResponse<Destiny.Components.Kiosks.DestinyKiosksComponent>?

        /// The loadouts available to the character.
        /// COMPONENT TYPE: CharacterLoadouts
        public var loadouts: SingleComponentResponse<Destiny.Components.Loadouts.DestinyLoadoutsComponent>?

        /// When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.
        /// This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
        /// COMPONENT TYPE: ItemSockets
        public var plugSets: SingleComponentResponse<Destiny.Components.PlugSets.DestinyPlugSetsComponent>?

        /// COMPONENT TYPE: PresentationNodes
        public var presentationNodes: SingleComponentResponse<Destiny.Components.Presentation.DestinyPresentationNodesComponent>?

        /// Character progression data, including Milestones.
        /// COMPONENT TYPE: CharacterProgressions
        public var progressions: SingleComponentResponse<Destiny.Entities.Characters.DestinyCharacterProgressionComponent>?

        /// COMPONENT TYPE: Records
        public var records: SingleComponentResponse<Destiny.Components.Records.DestinyCharacterRecordsComponent>?

        /// Character rendering data - a minimal set of information about equipment and dyes used for rendering.
        /// COMPONENT TYPE: CharacterRenderData
        public var renderData: SingleComponentResponse<Destiny.Entities.Characters.DestinyCharacterRenderComponent>?

        /// The set of components belonging to the player's UNinstanced items. Because apparently now those too can have information relevant to the character's state.
        /// COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
        public var uninstancedItemComponents: DestinyBaseItemComponentSetOfuint32?

        public enum CodingKeys: String, CodingKey {
            case activities
            case character
            case collectibles
            case currencyLookups
            case equipment
            case inventory
            case itemComponents
            case kiosks
            case loadouts
            case plugSets
            case presentationNodes
            case progressions
            case records
            case renderData
            case uninstancedItemComponents
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            activities = try? container.decode(SingleComponentResponse<Destiny.Entities.Characters.DestinyCharacterActivitiesComponent>.self, forKey: CodingKeys.activities)
            character = try? container.decode(SingleComponentResponse<Destiny.Entities.Characters.DestinyCharacterComponent>.self, forKey: CodingKeys.character)
            collectibles = try? container.decode(SingleComponentResponse<Destiny.Components.Collectibles.DestinyCollectiblesComponent>.self, forKey: CodingKeys.collectibles)
            currencyLookups = try? container.decode(SingleComponentResponse<Destiny.Components.Inventory.DestinyCurrenciesComponent>.self, forKey: CodingKeys.currencyLookups)
            equipment = try? container.decode(SingleComponentResponse<Destiny.Entities.Inventory.DestinyInventoryComponent>.self, forKey: CodingKeys.equipment)
            inventory = try? container.decode(SingleComponentResponse<Destiny.Entities.Inventory.DestinyInventoryComponent>.self, forKey: CodingKeys.inventory)
            itemComponents = try? container.decode(DestinyItemComponentSetOfint64.self, forKey: CodingKeys.itemComponents)
            kiosks = try? container.decode(SingleComponentResponse<Destiny.Components.Kiosks.DestinyKiosksComponent>.self, forKey: CodingKeys.kiosks)
            loadouts = try? container.decode(SingleComponentResponse<Destiny.Components.Loadouts.DestinyLoadoutsComponent>.self, forKey: CodingKeys.loadouts)
            plugSets = try? container.decode(SingleComponentResponse<Destiny.Components.PlugSets.DestinyPlugSetsComponent>.self, forKey: CodingKeys.plugSets)
            presentationNodes = try? container.decode(SingleComponentResponse<Destiny.Components.Presentation.DestinyPresentationNodesComponent>.self, forKey: CodingKeys.presentationNodes)
            progressions = try? container.decode(SingleComponentResponse<Destiny.Entities.Characters.DestinyCharacterProgressionComponent>.self, forKey: CodingKeys.progressions)
            records = try? container.decode(SingleComponentResponse<Destiny.Components.Records.DestinyCharacterRecordsComponent>.self, forKey: CodingKeys.records)
            renderData = try? container.decode(SingleComponentResponse<Destiny.Entities.Characters.DestinyCharacterRenderComponent>.self, forKey: CodingKeys.renderData)
            uninstancedItemComponents = try? container.decode(DestinyBaseItemComponentSetOfuint32.self, forKey: CodingKeys.uninstancedItemComponents)
        }
    }
}
