// This File was auto generated by BungoKitGen
//
// File: DestinyVendorsResponse.swift

import Foundation

public extension Destiny.Responses {
    /// A response containing all of the components for all requested vendors.
    struct DestinyVendorsResponse: Codable {
        /// Categories that the vendor has available, and references to the sales therein. These are keyed by the Vendor Hash, so you will get one Categories Component per vendor returned.
        /// COMPONENT TYPE: VendorCategories
        public var categories: DictionaryComponentResponse<Destiny.Entities.Vendors.DestinyVendorCategoriesComponent>?
        /// A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
        /// COMPONENT TYPE: CurrencyLookups
        public var currencyLookups: SingleComponentResponse<Destiny.Components.Inventory.DestinyCurrenciesComponent>?
        /// The set of item detail components, one set of item components per Vendor. These are keyed by the Vendor Hash, so you will get one Item Component Set per vendor returned.
        /// The components contained inside are themselves keyed by the vendorSaleIndex, and will have whatever item-level components you requested (Sockets, Stats, Instance data etc...) per item being sold by the vendor.
        public var itemComponents: [Int: DestinyItemComponentSetOfint32]?
        /// Sales, keyed by the vendorItemIndex of the item being sold. These are keyed by the Vendor Hash, so you will get one Sale Item Set Component per vendor returned.
        /// Note that within the Sale Item Set component, the sales are themselves keyed by the vendorSaleIndex, so you can relate it to the corrent sale item definition within the Vendor's definition.
        /// COMPONENT TYPE: VendorSales
        public var sales: DictionaryComponentResponse<Destiny.Responses.PersonalDestinyVendorSaleItemSetComponent>?
        /// A map of string variable values by hash for this character context.
        /// COMPONENT TYPE: StringVariables
        public var stringVariables: SingleComponentResponse<Destiny.Components.StringVariables.DestinyStringVariablesComponent>?
        /// For Vendors being returned, this will give you the information you need to group them and order them in the same way that the Bungie Companion app performs grouping. It will automatically be returned if you request the Vendors component.
        /// COMPONENT TYPE: Vendors
        public var vendorGroups: SingleComponentResponse<Destiny.Components.Vendors.DestinyVendorGroupComponent>?
        /// The base properties of the vendor. These are keyed by the Vendor Hash, so you will get one Vendor Component per vendor returned.
        /// COMPONENT TYPE: Vendors
        public var vendors: DictionaryComponentResponse<Destiny.Entities.Vendors.DestinyVendorComponent>?

        public enum CodingKeys: String, CodingKey {
            case categories
            case currencyLookups
            case itemComponents
            case sales
            case stringVariables
            case vendorGroups
            case vendors
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            categories = try? container.decode(DictionaryComponentResponse<Destiny.Entities.Vendors.DestinyVendorCategoriesComponent>.self, forKey: CodingKeys.categories)
            currencyLookups = try? container.decode(SingleComponentResponse<Destiny.Components.Inventory.DestinyCurrenciesComponent>.self, forKey: CodingKeys.currencyLookups)
            itemComponents = try? container.decode([Int: DestinyItemComponentSetOfint32].self, forKey: CodingKeys.itemComponents)
            sales = try? container.decode(DictionaryComponentResponse<Destiny.Responses.PersonalDestinyVendorSaleItemSetComponent>.self, forKey: CodingKeys.sales)
            stringVariables = try? container.decode(SingleComponentResponse<Destiny.Components.StringVariables.DestinyStringVariablesComponent>.self, forKey: CodingKeys.stringVariables)
            vendorGroups = try? container.decode(SingleComponentResponse<Destiny.Components.Vendors.DestinyVendorGroupComponent>.self, forKey: CodingKeys.vendorGroups)
            vendors = try? container.decode(DictionaryComponentResponse<Destiny.Entities.Vendors.DestinyVendorComponent>.self, forKey: CodingKeys.vendors)
        }
    }
}
