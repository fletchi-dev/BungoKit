// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyProfileRecordsComponent.swift

import Foundation

public extension Destiny.Components.Records {
    struct DestinyProfileRecordsComponent: Codable {
        /// Your 'active' Triumphs score.
        public var activeScore: Int32?

        /// Your 'legacy' Triumphs score.
        public var legacyScore: Int32?

        /// Your 'lifetime' Triumphs score.
        public var lifetimeScore: Int32?

        /// The hash for the root presentation node definition of Triumph categories.
        public var recordCategoriesRootNodeHash: UInt32?

        /// The hash for the root presentation node definition of Triumph Seals.
        public var recordSealsRootNodeHash: UInt32?

        public var records: [UInt32: Destiny.Components.Records.DestinyRecordComponent]?

        /// Your 'active' Triumphs score, maintained for backwards compatibility.
        public var score: Int32?

        /// If this profile is tracking a record, this is the hash identifier of the record it is tracking.
        public var trackedRecordHash: UInt32?

        public enum CodingKeys: String, CodingKey {
            case activeScore
            case legacyScore
            case lifetimeScore
            case recordCategoriesRootNodeHash
            case recordSealsRootNodeHash
            case records
            case score
            case trackedRecordHash
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            activeScore = try? container.decode(Int32.self, forKey: CodingKeys.activeScore)
            legacyScore = try? container.decode(Int32.self, forKey: CodingKeys.legacyScore)
            lifetimeScore = try? container.decode(Int32.self, forKey: CodingKeys.lifetimeScore)
            recordCategoriesRootNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.recordCategoriesRootNodeHash)
            recordSealsRootNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.recordSealsRootNodeHash)
            records = try? container.decode([UInt32: Destiny.Components.Records.DestinyRecordComponent].self, forKey: CodingKeys.records)
            score = try? container.decode(Int32.self, forKey: CodingKeys.score)
            trackedRecordHash = try? container.decode(UInt32.self, forKey: CodingKeys.trackedRecordHash)
        }
    }
}
