// This File was auto generated by BungoKitGen
//
// File: DestinyProfileTransitoryCurrentActivity.swift

import Foundation

public extension Destiny.Components.Profiles {
    /// If you are playing in an activity, this is some information about it.
    /// Note that we cannot guarantee any of this resembles what ends up in the PGCR in any way. They are sourced by two entirely separate systems with their own logic, and the one we source this data from should be considered non-authoritative in comparison.
    struct DestinyProfileTransitoryCurrentActivity: Codable {
        /// If you're still in it but it "ended" (like when folks are dancing around the loot after they beat a boss), this is when the activity ended.
        public var endTime: Date?
        /// If you have human opponents, this is the highest opposing team's score.
        public var highestOpposingFactionScore: Float?
        /// This is how many human or poorly crafted aimbot opponents you have.
        public var numberOfOpponents: Int32?
        /// This is how many human or poorly crafted aimbots are on your team.
        public var numberOfPlayers: Int32?
        /// This is what our non-authoritative source thought the score was.
        public var score: Float?
        /// When the activity started.
        public var startTime: Date?

        public enum CodingKeys: String, CodingKey {
            case endTime
            case highestOpposingFactionScore
            case numberOfOpponents
            case numberOfPlayers
            case score
            case startTime
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            endTime = try? container.decode(Date.self, forKey: CodingKeys.endTime)
            highestOpposingFactionScore = try? container.decode(Float.self, forKey: CodingKeys.highestOpposingFactionScore)
            numberOfOpponents = try? container.decode(Int32.self, forKey: CodingKeys.numberOfOpponents)
            numberOfPlayers = try? container.decode(Int32.self, forKey: CodingKeys.numberOfPlayers)
            score = try? container.decode(Float.self, forKey: CodingKeys.score)
            startTime = try? container.decode(Date.self, forKey: CodingKeys.startTime)
        }
    }
}
