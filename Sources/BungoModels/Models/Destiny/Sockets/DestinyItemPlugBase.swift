// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyItemPlugBase.swift

import Foundation

public extension Destiny.Sockets {
    struct DestinyItemPlugBase: Codable {
        /// If true, this plug has met all of its insertion requirements. Big if true.
        public var canInsert: Bool?

        /// If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.
        /// This list will be empty if the plug is enabled.
        public var enableFailIndexes: [Int32]?

        /// If true, this plug will provide its benefits while inserted.
        public var enabled: Bool?

        /// If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.
        /// This list will be empty if the plug can be inserted.
        public var insertFailIndexes: [Int32]?

        /// The hash identifier of the DestinyInventoryItemDefinition that represents this plug.
        public var plugItemHash: UInt32?

        public enum CodingKeys: String, CodingKey {
            case canInsert
            case enableFailIndexes
            case enabled
            case insertFailIndexes
            case plugItemHash
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            canInsert = try? container.decode(Bool.self, forKey: CodingKeys.canInsert)
            enableFailIndexes = try? container.decode([Int32].self, forKey: CodingKeys.enableFailIndexes)
            enabled = try? container.decode(Bool.self, forKey: CodingKeys.enabled)
            insertFailIndexes = try? container.decode([Int32].self, forKey: CodingKeys.insertFailIndexes)
            plugItemHash = try? container.decode(UInt32.self, forKey: CodingKeys.plugItemHash)
        }
    }
}
