// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: DestinyCharacterComponent.swift

import Foundation

public extension Destiny.Entities.Characters {
    /// This component contains base properties of the character. You'll probably want to always request this component, but hey you do you.
    struct DestinyCharacterComponent: Codable {
        /// The "base" level of your character, not accounting for any light level.
        public var baseCharacterLevel: Int32?

        /// The unique identifier for the character.
        public var characterId: Int64?

        /// Use this hash to look up the character's DestinyClassDefinition.
        public var classHash: UInt32?

        /// Mostly for historical purposes at this point, this is an enumeration for the character's class.
        /// It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.
        public var classType: Destiny.DestinyClass?

        /// The last date that the user played Destiny.
        public var dateLastPlayed: Date?

        /// A shortcut path to the user's currently equipped emblem background image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.
        public var emblemBackgroundPath: String?

        /// A shortcut for getting the background color of the user's currently equipped emblem without having to do a DestinyInventoryItemDefinition lookup.
        public var emblemColor: Destiny.Misc.DestinyColor?

        /// The hash of the currently equipped emblem for the user. Can be used to look up the DestinyInventoryItemDefinition.
        public var emblemHash: UInt32?

        /// A shortcut path to the user's currently equipped emblem image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.
        public var emblemPath: String?

        /// Use this hash to look up the character's DestinyGenderDefinition.
        public var genderHash: UInt32?

        /// Mostly for historical purposes at this point, this is an enumeration for the character's Gender.
        /// It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove. And yeah, it's an enumeration and not a boolean. Fight me.
        public var genderType: Destiny.DestinyGender?

        /// The progression that indicates your character's level. Not their light level, but their character level: you know, the thing you max out a couple hours in and then ignore for the sake of light level.
        public var levelProgression: Destiny.DestinyProgression?

        /// The user's calculated "Light Level". Light level is an indicator of your power that mostly matters in the end game, once you've reached the maximum character level: it's a level that's dependent on the average Attack/Defense power of your items.
        public var light: Int32?

        /// Every Destiny Profile has a membershipId. This is provided on the character as well for convenience.
        public var membershipId: Int64?

        /// membershipType tells you the platform on which the character plays. Examine the BungieMembershipType enumeration for possible values.
        public var membershipType: BungieMembershipType?

        /// If the user is currently playing, this is how long they've been playing.
        public var minutesPlayedThisSession: Int64?

        /// If this value is 525,600, then they played Destiny for a year. Or they're a very dedicated Rent fan. Note that this includes idle time, not just time spent actually in activities shooting things.
        public var minutesPlayedTotal: Int64?

        /// A number between 0 and 100, indicating the whole and fractional % remaining to get to the next character level.
        public var percentToNextLevel: Float?

        /// Use this hash to look up the character's DestinyRaceDefinition.
        public var raceHash: UInt32?

        /// Mostly for historical purposes at this point, this is an enumeration for the character's race.
        /// It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.
        public var raceType: Destiny.DestinyRace?

        /// Your character's stats, such as Agility, Resilience, etc... *not* historical stats.
        /// You'll have to call a different endpoint for those.
        public var stats: [Int: Int32]?

        /// If this Character has a title assigned to it, this is the identifier of the DestinyRecordDefinition that has that title information.
        public var titleRecordHash: UInt32?

        public enum CodingKeys: String, CodingKey {
            case baseCharacterLevel
            case characterId
            case classHash
            case classType
            case dateLastPlayed
            case emblemBackgroundPath
            case emblemColor
            case emblemHash
            case emblemPath
            case genderHash
            case genderType
            case levelProgression
            case light
            case membershipId
            case membershipType
            case minutesPlayedThisSession
            case minutesPlayedTotal
            case percentToNextLevel
            case raceHash
            case raceType
            case stats
            case titleRecordHash
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            baseCharacterLevel = try? container.decode(Int32.self, forKey: CodingKeys.baseCharacterLevel)
            let characterId = try? container.decode(String.self, forKey: CodingKeys.characterId)
            if let characterId, let characterIdInt = Int64(characterId) {
                self.characterId = characterIdInt
            } else {
                self.characterId = nil
            }
            classHash = try? container.decode(UInt32.self, forKey: CodingKeys.classHash)
            classType = try? container.decode(Destiny.DestinyClass.self, forKey: CodingKeys.classType)
            dateLastPlayed = try? container.decode(Date.self, forKey: CodingKeys.dateLastPlayed)
            emblemBackgroundPath = try? container.decode(String.self, forKey: CodingKeys.emblemBackgroundPath)
            emblemColor = try? container.decode(Destiny.Misc.DestinyColor.self, forKey: CodingKeys.emblemColor)
            emblemHash = try? container.decode(UInt32.self, forKey: CodingKeys.emblemHash)
            emblemPath = try? container.decode(String.self, forKey: CodingKeys.emblemPath)
            genderHash = try? container.decode(UInt32.self, forKey: CodingKeys.genderHash)
            genderType = try? container.decode(Destiny.DestinyGender.self, forKey: CodingKeys.genderType)
            levelProgression = try? container.decode(Destiny.DestinyProgression.self, forKey: CodingKeys.levelProgression)
            light = try? container.decode(Int32.self, forKey: CodingKeys.light)
            let membershipId = try? container.decode(String.self, forKey: CodingKeys.membershipId)
            if let membershipId, let membershipIdInt = Int64(membershipId) {
                self.membershipId = membershipIdInt
            } else {
                self.membershipId = nil
            }
            membershipType = try? container.decode(BungieMembershipType.self, forKey: CodingKeys.membershipType)
            let minutesPlayedThisSession = try? container.decode(String.self, forKey: CodingKeys.minutesPlayedThisSession)
            if let minutesPlayedThisSession, let minutesPlayedThisSessionInt = Int64(minutesPlayedThisSession) {
                self.minutesPlayedThisSession = minutesPlayedThisSessionInt
            } else {
                self.minutesPlayedThisSession = nil
            }
            let minutesPlayedTotal = try? container.decode(String.self, forKey: CodingKeys.minutesPlayedTotal)
            if let minutesPlayedTotal, let minutesPlayedTotalInt = Int64(minutesPlayedTotal) {
                self.minutesPlayedTotal = minutesPlayedTotalInt
            } else {
                self.minutesPlayedTotal = nil
            }
            percentToNextLevel = try? container.decode(Float.self, forKey: CodingKeys.percentToNextLevel)
            raceHash = try? container.decode(UInt32.self, forKey: CodingKeys.raceHash)
            raceType = try? container.decode(Destiny.DestinyRace.self, forKey: CodingKeys.raceType)
            stats = try? container.decode([Int: Int32].self, forKey: CodingKeys.stats)
            titleRecordHash = try? container.decode(UInt32.self, forKey: CodingKeys.titleRecordHash)
        }
    }
}
