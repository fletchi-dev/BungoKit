// This File was auto generated by BungoKitGen
//
// File: FireteamSummary.swift

import Foundation

public extension Fireteam {
    struct FireteamSummary: Codable {
        public var activityType: Int32?
        public var alternateSlotCount: Int32?
        public var availableAlternateSlotCount: Int32?
        public var availablePlayerSlotCount: Int32?
        public var dateCreated: Date?
        public var dateModified: Date?
        public var datePlayerModified: Date?
        public var fireteamId: Int64?
        public var groupId: Int64?
        public var isImmediate: Bool?
        public var isPublic: Bool?
        public var isValid: Bool?
        public var locale: String?
        public var ownerCurrentGuardianRankSnapshot: Int32?
        public var ownerHighestLifetimeGuardianRankSnapshot: Int32?
        public var ownerMembershipId: Int64?
        public var ownerTotalCommendationScoreSnapshot: Int32?
        public var platform: Fireteam.FireteamPlatform?
        public var playerSlotCount: Int32?
        public var scheduledTime: Date?
        public var title: String?
        public var titleBeforeModeration: String?

        public enum CodingKeys: String, CodingKey {
            case activityType
            case alternateSlotCount
            case availableAlternateSlotCount
            case availablePlayerSlotCount
            case dateCreated
            case dateModified
            case datePlayerModified
            case fireteamId
            case groupId
            case isImmediate
            case isPublic
            case isValid
            case locale
            case ownerCurrentGuardianRankSnapshot
            case ownerHighestLifetimeGuardianRankSnapshot
            case ownerMembershipId
            case ownerTotalCommendationScoreSnapshot
            case platform
            case playerSlotCount
            case scheduledTime
            case title
            case titleBeforeModeration
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            activityType = try? container.decode(Int32.self, forKey: CodingKeys.activityType)
            alternateSlotCount = try? container.decode(Int32.self, forKey: CodingKeys.alternateSlotCount)
            availableAlternateSlotCount = try? container.decode(Int32.self, forKey: CodingKeys.availableAlternateSlotCount)
            availablePlayerSlotCount = try? container.decode(Int32.self, forKey: CodingKeys.availablePlayerSlotCount)
            dateCreated = try? container.decode(Date.self, forKey: CodingKeys.dateCreated)
            dateModified = try? container.decode(Date.self, forKey: CodingKeys.dateModified)
            datePlayerModified = try? container.decode(Date.self, forKey: CodingKeys.datePlayerModified)
            let fireteamId = try? container.decode(String.self, forKey: CodingKeys.fireteamId)
            if let fireteamId, let fireteamIdInt = Int64(fireteamId) {
                self.fireteamId = fireteamIdInt
            } else {
                self.fireteamId = nil
            }
            let groupId = try? container.decode(String.self, forKey: CodingKeys.groupId)
            if let groupId, let groupIdInt = Int64(groupId) {
                self.groupId = groupIdInt
            } else {
                self.groupId = nil
            }
            isImmediate = try? container.decode(Bool.self, forKey: CodingKeys.isImmediate)
            isPublic = try? container.decode(Bool.self, forKey: CodingKeys.isPublic)
            isValid = try? container.decode(Bool.self, forKey: CodingKeys.isValid)
            locale = try? container.decode(String.self, forKey: CodingKeys.locale)
            ownerCurrentGuardianRankSnapshot = try? container.decode(Int32.self, forKey: CodingKeys.ownerCurrentGuardianRankSnapshot)
            ownerHighestLifetimeGuardianRankSnapshot = try? container.decode(Int32.self, forKey: CodingKeys.ownerHighestLifetimeGuardianRankSnapshot)
            let ownerMembershipId = try? container.decode(String.self, forKey: CodingKeys.ownerMembershipId)
            if let ownerMembershipId, let ownerMembershipIdInt = Int64(ownerMembershipId) {
                self.ownerMembershipId = ownerMembershipIdInt
            } else {
                self.ownerMembershipId = nil
            }
            ownerTotalCommendationScoreSnapshot = try? container.decode(Int32.self, forKey: CodingKeys.ownerTotalCommendationScoreSnapshot)
            platform = try? container.decode(Fireteam.FireteamPlatform.self, forKey: CodingKeys.platform)
            playerSlotCount = try? container.decode(Int32.self, forKey: CodingKeys.playerSlotCount)
            scheduledTime = try? container.decode(Date.self, forKey: CodingKeys.scheduledTime)
            title = try? container.decode(String.self, forKey: CodingKeys.title)
            titleBeforeModeration = try? container.decode(String.self, forKey: CodingKeys.titleBeforeModeration)
        }
    }
}
