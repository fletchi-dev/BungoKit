// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: GroupResponse.swift

import Foundation

public extension GroupsV2 {
    struct GroupResponse: Codable {
        public var allianceStatus: GroupsV2.GroupAllianceStatus?

        public var alliedIds: [Int64]?

        /// This property will be populated if the authenticated user is a member of the group. Note that because of account linking, a user can sometimes be part of a clan more than once. As such, this returns the highest member type available.
        public var currentUserMemberMap: [Int32: GroupsV2.GroupMember]?

        /// A convenience property that indicates if every membership you (the current user) have that is a part of this group are part of an account that is considered inactive - for example, overridden accounts in Cross Save.
        public var currentUserMembershipsInactiveForDestiny: Bool?

        /// This property will be populated if the authenticated user is an applicant or has an outstanding invitation to join. Note that because of account linking, a user can sometimes be part of a clan more than once.
        public var currentUserPotentialMemberMap: [Int32: GroupsV2.GroupPotentialMember]?

        public var detail: GroupsV2.GroupV2?

        public var founder: GroupsV2.GroupMember?

        public var groupJoinInviteCount: Int32?

        public var parentGroup: GroupsV2.GroupV2?

        public enum CodingKeys: String, CodingKey {
            case allianceStatus
            case alliedIds
            case currentUserMemberMap
            case currentUserMembershipsInactiveForDestiny
            case currentUserPotentialMemberMap
            case detail
            case founder
            case groupJoinInviteCount
            case parentGroup
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            allianceStatus = try? container.decode(GroupsV2.GroupAllianceStatus.self, forKey: CodingKeys.allianceStatus)
            alliedIds = try? container.decode([Int64].self, forKey: CodingKeys.alliedIds)
            currentUserMemberMap = try? container.decode([Int32: GroupsV2.GroupMember].self, forKey: CodingKeys.currentUserMemberMap)
            currentUserMembershipsInactiveForDestiny = try? container.decode(Bool.self, forKey: CodingKeys.currentUserMembershipsInactiveForDestiny)
            currentUserPotentialMemberMap = try? container.decode([Int32: GroupsV2.GroupPotentialMember].self, forKey: CodingKeys.currentUserPotentialMemberMap)
            detail = try? container.decode(GroupsV2.GroupV2.self, forKey: CodingKeys.detail)
            founder = try? container.decode(GroupsV2.GroupMember.self, forKey: CodingKeys.founder)
            groupJoinInviteCount = try? container.decode(Int32.self, forKey: CodingKeys.groupJoinInviteCount)
            parentGroup = try? container.decode(GroupsV2.GroupV2.self, forKey: CodingKeys.parentGroup)
        }
    }
}
