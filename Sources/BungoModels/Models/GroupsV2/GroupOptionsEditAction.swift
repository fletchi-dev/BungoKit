// This File was auto generated by BungoKitGen
//
// File: GroupOptionsEditAction.swift

import Foundation

public extension GroupsV2 {
    struct GroupOptionsEditAction: Codable {
        /// Minimum Member Level allowed to host guided games
        /// Always Allowed: Founder, Acting Founder, Admin
        /// Allowed Overrides: None, Member, Beginner
        /// Default is Member for clans, None for groups, although this means nothing for groups.
        public var hostGuidedGamePermissionOverride: Int32?
        /// Minimum Member Level allowed to invite new members to group
        /// Always Allowed: Founder, Acting Founder
        /// True means admins have this power, false means they don't
        /// Default is false for clans, true for groups.
        public var invitePermissionOverride: Bool?
        /// Level to join a member at when accepting an invite, application, or joining an open clan
        /// Default is Beginner.
        public var joinLevel: Int32?
        /// Minimum Member Level allowed to update banner
        /// Always Allowed: Founder, Acting Founder
        /// True means admins have this power, false means they don't
        /// Default is false for clans, true for groups.
        public var updateBannerPermissionOverride: Bool?
        /// Minimum Member Level allowed to update group culture
        /// Always Allowed: Founder, Acting Founder
        /// True means admins have this power, false means they don't
        /// Default is false for clans, true for groups.
        public var updateCulturePermissionOverride: Bool?

        public enum CodingKeys: String, CodingKey {
            case hostGuidedGamePermissionOverride = "HostGuidedGamePermissionOverride"
            case invitePermissionOverride = "InvitePermissionOverride"
            case joinLevel = "JoinLevel"
            case updateBannerPermissionOverride = "UpdateBannerPermissionOverride"
            case updateCulturePermissionOverride = "UpdateCulturePermissionOverride"
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            hostGuidedGamePermissionOverride = try? container.decode(Int32.self, forKey: CodingKeys.hostGuidedGamePermissionOverride)
            invitePermissionOverride = try? container.decode(Bool.self, forKey: CodingKeys.invitePermissionOverride)
            joinLevel = try? container.decode(Int32.self, forKey: CodingKeys.joinLevel)
            updateBannerPermissionOverride = try? container.decode(Bool.self, forKey: CodingKeys.updateBannerPermissionOverride)
            updateCulturePermissionOverride = try? container.decode(Bool.self, forKey: CodingKeys.updateCulturePermissionOverride)
        }
    }
}
