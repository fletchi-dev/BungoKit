// This File was auto generated by BungoKitGen
//
// File: GroupFeatures.swift

import Foundation

public extension GroupsV2 {
    struct GroupFeatures: Codable {
        public var capabilities: GroupsV2.Capabilities?
        /// Minimum Member Level allowed to host guided games
        /// Always Allowed: Founder, Acting Founder, Admin
        /// Allowed Overrides: None, Member, Beginner
        /// Default is Member for clans, None for groups, although this means nothing for groups.
        public var hostGuidedGamePermissionOverride: GroupsV2.HostGuidedGamesPermissionLevel?
        /// Minimum Member Level allowed to invite new members to group
        /// Always Allowed: Founder, Acting Founder
        /// True means admins have this power, false means they don't
        /// Default is false for clans, true for groups.
        public var invitePermissionOverride: Bool?
        /// Level to join a member at when accepting an invite, application, or joining an open clan
        /// Default is Beginner.
        public var joinLevel: GroupsV2.RuntimeGroupMemberType?
        public var maximumMembers: Int32?
        /// Maximum number of groups of this type a typical membership may join. For example, a user may join about 50 General groups with their Bungie.net account. They may join one clan per Destiny membership.
        public var maximumMembershipsOfGroupType: Int32?
        public var membershipTypes: [BungieMembershipType]?
        /// Minimum Member Level allowed to update banner
        /// Always Allowed: Founder, Acting Founder
        /// True means admins have this power, false means they don't
        /// Default is false for clans, true for groups.
        public var updateBannerPermissionOverride: Bool?
        /// Minimum Member Level allowed to update group culture
        /// Always Allowed: Founder, Acting Founder
        /// True means admins have this power, false means they don't
        /// Default is false for clans, true for groups.
        public var updateCulturePermissionOverride: Bool?

        public enum CodingKeys: String, CodingKey {
            case capabilities
            case hostGuidedGamePermissionOverride
            case invitePermissionOverride
            case joinLevel
            case maximumMembers
            case maximumMembershipsOfGroupType
            case membershipTypes
            case updateBannerPermissionOverride
            case updateCulturePermissionOverride
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            capabilities = try? container.decode(GroupsV2.Capabilities.self, forKey: CodingKeys.capabilities)
            hostGuidedGamePermissionOverride = try? container.decode(GroupsV2.HostGuidedGamesPermissionLevel.self, forKey: CodingKeys.hostGuidedGamePermissionOverride)
            invitePermissionOverride = try? container.decode(Bool.self, forKey: CodingKeys.invitePermissionOverride)
            joinLevel = try? container.decode(GroupsV2.RuntimeGroupMemberType.self, forKey: CodingKeys.joinLevel)
            maximumMembers = try? container.decode(Int32.self, forKey: CodingKeys.maximumMembers)
            maximumMembershipsOfGroupType = try? container.decode(Int32.self, forKey: CodingKeys.maximumMembershipsOfGroupType)
            membershipTypes = try? container.decode([BungieMembershipType].self, forKey: CodingKeys.membershipTypes)
            updateBannerPermissionOverride = try? container.decode(Bool.self, forKey: CodingKeys.updateBannerPermissionOverride)
            updateCulturePermissionOverride = try? container.decode(Bool.self, forKey: CodingKeys.updateCulturePermissionOverride)
        }
    }
}
