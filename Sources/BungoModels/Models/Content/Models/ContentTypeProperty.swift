// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: ContentTypeProperty.swift

import Foundation

public extension Content.Models {
    struct ContentTypeProperty: Codable {
        public var attributes: [String: String]?

        public var bindToProperty: String?

        public var boundRegex: String?

        public var childProperties: [Content.Models.ContentTypeProperty]?

        public var contentTypeAllowed: String?

        public var datatype: Content.Models.ContentPropertyDataTypeEnum?

        public var defaultValues: [Content.Models.ContentTypeDefaultValue]?

        public var enabled: Bool?

        public var entitytype: String?

        public var fallback: Bool?

        public var isCombo: Bool?

        public var isExternalAllowed: Bool?

        public var isImage: Bool?

        public var isTitle: Bool?

        public var isVideo: Bool?

        public var legalContentTypes: [String]?

        public var localizable: Bool?

        public var maxByteLength: Int32?

        public var maxFileSize: Int32?

        public var maxHeight: Int32?

        public var maxLength: Int32?

        public var maxWidth: Int32?

        public var minHeight: Int32?

        public var minWidth: Int32?

        public var name: String?

        public var order: Int32?

        public var propertyDescription: String?

        public var propertySection: String?

        public var readableName: String?

        public var regexp: String?

        public var representationSelection: [String: String]?

        public var representationValidationString: String?

        public var required: Bool?

        public var rootPropertyName: String?

        public var rssAttribute: String?

        public var suppressProperty: Bool?

        public var validateAs: String?

        public var value: String?

        public var visible: Bool?

        public var visibleDependency: String?

        public var visibleOn: String?

        public var weight: Int32?

        public enum CodingKeys: String, CodingKey {
            case attributes
            case bindToProperty
            case boundRegex
            case childProperties
            case contentTypeAllowed
            case datatype
            case defaultValues
            case enabled
            case entitytype
            case fallback
            case isCombo
            case isExternalAllowed
            case isImage
            case isTitle
            case isVideo
            case legalContentTypes
            case localizable
            case maxByteLength
            case maxFileSize
            case maxHeight
            case maxLength
            case maxWidth
            case minHeight
            case minWidth
            case name
            case order
            case propertyDescription
            case propertySection
            case readableName
            case regexp
            case representationSelection
            case representationValidationString
            case required
            case rootPropertyName
            case rssAttribute
            case suppressProperty
            case validateAs
            case value
            case visible
            case visibleDependency
            case visibleOn
            case weight
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            attributes = try? container.decode([String: String].self, forKey: CodingKeys.attributes)
            bindToProperty = try? container.decode(String.self, forKey: CodingKeys.bindToProperty)
            boundRegex = try? container.decode(String.self, forKey: CodingKeys.boundRegex)
            childProperties = try? container.decode([Content.Models.ContentTypeProperty].self, forKey: CodingKeys.childProperties)
            contentTypeAllowed = try? container.decode(String.self, forKey: CodingKeys.contentTypeAllowed)
            datatype = try? container.decode(Content.Models.ContentPropertyDataTypeEnum.self, forKey: CodingKeys.datatype)
            defaultValues = try? container.decode([Content.Models.ContentTypeDefaultValue].self, forKey: CodingKeys.defaultValues)
            enabled = try? container.decode(Bool.self, forKey: CodingKeys.enabled)
            entitytype = try? container.decode(String.self, forKey: CodingKeys.entitytype)
            fallback = try? container.decode(Bool.self, forKey: CodingKeys.fallback)
            isCombo = try? container.decode(Bool.self, forKey: CodingKeys.isCombo)
            isExternalAllowed = try? container.decode(Bool.self, forKey: CodingKeys.isExternalAllowed)
            isImage = try? container.decode(Bool.self, forKey: CodingKeys.isImage)
            isTitle = try? container.decode(Bool.self, forKey: CodingKeys.isTitle)
            isVideo = try? container.decode(Bool.self, forKey: CodingKeys.isVideo)
            legalContentTypes = try? container.decode([String].self, forKey: CodingKeys.legalContentTypes)
            localizable = try? container.decode(Bool.self, forKey: CodingKeys.localizable)
            maxByteLength = try? container.decode(Int32.self, forKey: CodingKeys.maxByteLength)
            maxFileSize = try? container.decode(Int32.self, forKey: CodingKeys.maxFileSize)
            maxHeight = try? container.decode(Int32.self, forKey: CodingKeys.maxHeight)
            maxLength = try? container.decode(Int32.self, forKey: CodingKeys.maxLength)
            maxWidth = try? container.decode(Int32.self, forKey: CodingKeys.maxWidth)
            minHeight = try? container.decode(Int32.self, forKey: CodingKeys.minHeight)
            minWidth = try? container.decode(Int32.self, forKey: CodingKeys.minWidth)
            name = try? container.decode(String.self, forKey: CodingKeys.name)
            order = try? container.decode(Int32.self, forKey: CodingKeys.order)
            propertyDescription = try? container.decode(String.self, forKey: CodingKeys.propertyDescription)
            propertySection = try? container.decode(String.self, forKey: CodingKeys.propertySection)
            readableName = try? container.decode(String.self, forKey: CodingKeys.readableName)
            regexp = try? container.decode(String.self, forKey: CodingKeys.regexp)
            representationSelection = try? container.decode([String: String].self, forKey: CodingKeys.representationSelection)
            representationValidationString = try? container.decode(String.self, forKey: CodingKeys.representationValidationString)
            required = try? container.decode(Bool.self, forKey: CodingKeys.required)
            rootPropertyName = try? container.decode(String.self, forKey: CodingKeys.rootPropertyName)
            rssAttribute = try? container.decode(String.self, forKey: CodingKeys.rssAttribute)
            suppressProperty = try? container.decode(Bool.self, forKey: CodingKeys.suppressProperty)
            validateAs = try? container.decode(String.self, forKey: CodingKeys.validateAs)
            value = try? container.decode(String.self, forKey: CodingKeys.value)
            visible = try? container.decode(Bool.self, forKey: CodingKeys.visible)
            visibleDependency = try? container.decode(String.self, forKey: CodingKeys.visibleDependency)
            visibleOn = try? container.decode(String.self, forKey: CodingKeys.visibleOn)
            weight = try? container.decode(Int32.self, forKey: CodingKeys.weight)
        }
    }
}
