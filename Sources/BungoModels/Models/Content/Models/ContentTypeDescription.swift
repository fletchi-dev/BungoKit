// This File was auto generated by BungoCodeGen and should not be modified.
//
// File: ContentTypeDescription.swift

import Foundation

public extension Content.Models {
    struct ContentTypeDescription: Codable {
        public var allowComments: Bool?

        public var autoEnglishPropertyFallback: Bool?

        public var bindIdentifierToProperty: String?

        public var boundRegex: String?

        public var bulkUploadable: Bool?

        public var cType: String?

        public var contentDescription: String?

        public var forceIdentifierBinding: Bool?

        public var name: String?

        public var previewImage: String?

        public var previews: [Content.Models.ContentPreview]?

        public var priority: Int32?

        public var properties: [Content.Models.ContentTypeProperty]?

        public var propertySections: [Content.Models.ContentTypePropertySection]?

        public var reminder: String?

        public var showInContentEditor: Bool?

        public var suppressCmsPath: Bool?

        public var tagMetadata: [Content.Models.TagMetadataDefinition]?

        public var tagMetadataItems: [String: Content.Models.TagMetadataItem]?

        public var typeOf: String?

        public var usageExamples: [String]?

        public enum CodingKeys: String, CodingKey {
            case allowComments
            case autoEnglishPropertyFallback
            case bindIdentifierToProperty
            case boundRegex
            case bulkUploadable
            case cType
            case contentDescription
            case forceIdentifierBinding
            case name
            case previewImage
            case previews
            case priority
            case properties
            case propertySections
            case reminder
            case showInContentEditor
            case suppressCmsPath
            case tagMetadata
            case tagMetadataItems
            case typeOf
            case usageExamples
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            allowComments = try? container.decode(Bool.self, forKey: CodingKeys.allowComments)
            autoEnglishPropertyFallback = try? container.decode(Bool.self, forKey: CodingKeys.autoEnglishPropertyFallback)
            bindIdentifierToProperty = try? container.decode(String.self, forKey: CodingKeys.bindIdentifierToProperty)
            boundRegex = try? container.decode(String.self, forKey: CodingKeys.boundRegex)
            bulkUploadable = try? container.decode(Bool.self, forKey: CodingKeys.bulkUploadable)
            cType = try? container.decode(String.self, forKey: CodingKeys.cType)
            contentDescription = try? container.decode(String.self, forKey: CodingKeys.contentDescription)
            forceIdentifierBinding = try? container.decode(Bool.self, forKey: CodingKeys.forceIdentifierBinding)
            name = try? container.decode(String.self, forKey: CodingKeys.name)
            previewImage = try? container.decode(String.self, forKey: CodingKeys.previewImage)
            previews = try? container.decode([Content.Models.ContentPreview].self, forKey: CodingKeys.previews)
            priority = try? container.decode(Int32.self, forKey: CodingKeys.priority)
            properties = try? container.decode([Content.Models.ContentTypeProperty].self, forKey: CodingKeys.properties)
            propertySections = try? container.decode([Content.Models.ContentTypePropertySection].self, forKey: CodingKeys.propertySections)
            reminder = try? container.decode(String.self, forKey: CodingKeys.reminder)
            showInContentEditor = try? container.decode(Bool.self, forKey: CodingKeys.showInContentEditor)
            suppressCmsPath = try? container.decode(Bool.self, forKey: CodingKeys.suppressCmsPath)
            tagMetadata = try? container.decode([Content.Models.TagMetadataDefinition].self, forKey: CodingKeys.tagMetadata)
            tagMetadataItems = try? container.decode([String: Content.Models.TagMetadataItem].self, forKey: CodingKeys.tagMetadataItems)
            typeOf = try? container.decode(String.self, forKey: CodingKeys.typeOf)
            usageExamples = try? container.decode([String].self, forKey: CodingKeys.usageExamples)
        }
    }
}
