// This File was auto generated by BungoKitGen
//
// File: PostSearchResponse.swift

import Foundation

public extension Forum {
    struct PostSearchResponse: Codable {
        public var authors: [User.GeneralUser]?
        public var availablePages: Int32?
        public var groups: [GroupsV2.GroupResponse]?
        public var hasMore: Bool?
        public var polls: [Forum.PollResponse]?
        public var query: Queries.PagedQuery?
        public var recruitmentDetails: [Forum.ForumRecruitmentDetail]?
        public var relatedPosts: [Forum.PostResponse]?
        public var replacementContinuationToken: String?
        public var results: [Forum.PostResponse]?
        public var searchedTags: [Tags.Models.Contracts.TagResponse]?
        public var totalResults: Int32?
        /// If useTotalResults is true, then totalResults represents an accurate count.
        /// If False, it does not, and may be estimated/only the size of the current page.
        /// Either way, you should probably always only trust hasMore.
        /// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
        public var useTotalResults: Bool?

        public enum CodingKeys: String, CodingKey {
            case authors
            case availablePages
            case groups
            case hasMore
            case polls
            case query
            case recruitmentDetails
            case relatedPosts
            case replacementContinuationToken
            case results
            case searchedTags
            case totalResults
            case useTotalResults
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            authors = try? container.decode([User.GeneralUser].self, forKey: CodingKeys.authors)
            availablePages = try? container.decode(Int32.self, forKey: CodingKeys.availablePages)
            groups = try? container.decode([GroupsV2.GroupResponse].self, forKey: CodingKeys.groups)
            hasMore = try? container.decode(Bool.self, forKey: CodingKeys.hasMore)
            polls = try? container.decode([Forum.PollResponse].self, forKey: CodingKeys.polls)
            query = try? container.decode(Queries.PagedQuery.self, forKey: CodingKeys.query)
            recruitmentDetails = try? container.decode([Forum.ForumRecruitmentDetail].self, forKey: CodingKeys.recruitmentDetails)
            relatedPosts = try? container.decode([Forum.PostResponse].self, forKey: CodingKeys.relatedPosts)
            replacementContinuationToken = try? container.decode(String.self, forKey: CodingKeys.replacementContinuationToken)
            results = try? container.decode([Forum.PostResponse].self, forKey: CodingKeys.results)
            searchedTags = try? container.decode([Tags.Models.Contracts.TagResponse].self, forKey: CodingKeys.searchedTags)
            totalResults = try? container.decode(Int32.self, forKey: CodingKeys.totalResults)
            useTotalResults = try? container.decode(Bool.self, forKey: CodingKeys.useTotalResults)
        }
    }
}
