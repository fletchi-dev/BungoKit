// This File was auto generated by BungoKitGen
//
// File: Destiny2CoreSettings.swift

import Foundation

public extension Common.Models {
    struct Destiny2CoreSettings: Codable {
        public var activeSealsRootNodeHash: UInt32?
        public var activeTriumphsRootNodeHash: UInt32?
        public var ammoTypeHeavyIcon: String?
        public var ammoTypePrimaryIcon: String?
        public var ammoTypeSpecialIcon: String?
        public var badgesRootNode: UInt32?
        public var collectionRootNode: UInt32?
        public var craftingRootNodeHash: UInt32?
        public var currentRankProgressionHashes: [UInt32]?
        public var currentSeasonHash: UInt32?
        public var currentSeasonalArtifactHash: UInt32?
        public var exoticCatalystsRootNodeHash: UInt32?
        public var futureSeasonHashes: [UInt32]?
        public var guardianRankConstantsHash: UInt32?
        public var guardianRanksRootNodeHash: UInt32?
        public var insertPlugFreeBlockedSocketTypeHashes: [UInt32]?
        public var insertPlugFreeProtectedPlugItemHashes: [UInt32]?
        public var legacySealsRootNodeHash: UInt32?
        public var legacyTriumphsRootNodeHash: UInt32?
        public var loadoutConstantsHash: UInt32?
        public var loreRootNodeHash: UInt32?
        public var medalsRootNode: UInt32?
        public var medalsRootNodeHash: UInt32?
        public var metricsRootNode: UInt32?
        public var pastSeasonHashes: [UInt32]?
        public var recordsRootNode: UInt32?
        public var seasonalChallengesPresentationNodeHash: UInt32?
        public var undiscoveredCollectibleImage: String?

        public enum CodingKeys: String, CodingKey {
            case activeSealsRootNodeHash
            case activeTriumphsRootNodeHash
            case ammoTypeHeavyIcon
            case ammoTypePrimaryIcon
            case ammoTypeSpecialIcon
            case badgesRootNode
            case collectionRootNode
            case craftingRootNodeHash
            case currentRankProgressionHashes
            case currentSeasonHash
            case currentSeasonalArtifactHash
            case exoticCatalystsRootNodeHash
            case futureSeasonHashes
            case guardianRankConstantsHash
            case guardianRanksRootNodeHash
            case insertPlugFreeBlockedSocketTypeHashes
            case insertPlugFreeProtectedPlugItemHashes
            case legacySealsRootNodeHash
            case legacyTriumphsRootNodeHash
            case loadoutConstantsHash
            case loreRootNodeHash
            case medalsRootNode
            case medalsRootNodeHash
            case metricsRootNode
            case pastSeasonHashes
            case recordsRootNode
            case seasonalChallengesPresentationNodeHash
            case undiscoveredCollectibleImage
        }

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<CodingKeys> = try decoder.container(keyedBy: CodingKeys.self)

            activeSealsRootNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.activeSealsRootNodeHash)
            activeTriumphsRootNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.activeTriumphsRootNodeHash)
            ammoTypeHeavyIcon = try? container.decode(String.self, forKey: CodingKeys.ammoTypeHeavyIcon)
            ammoTypePrimaryIcon = try? container.decode(String.self, forKey: CodingKeys.ammoTypePrimaryIcon)
            ammoTypeSpecialIcon = try? container.decode(String.self, forKey: CodingKeys.ammoTypeSpecialIcon)
            badgesRootNode = try? container.decode(UInt32.self, forKey: CodingKeys.badgesRootNode)
            collectionRootNode = try? container.decode(UInt32.self, forKey: CodingKeys.collectionRootNode)
            craftingRootNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.craftingRootNodeHash)
            currentRankProgressionHashes = try? container.decode([UInt32].self, forKey: CodingKeys.currentRankProgressionHashes)
            currentSeasonHash = try? container.decode(UInt32.self, forKey: CodingKeys.currentSeasonHash)
            currentSeasonalArtifactHash = try? container.decode(UInt32.self, forKey: CodingKeys.currentSeasonalArtifactHash)
            exoticCatalystsRootNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.exoticCatalystsRootNodeHash)
            futureSeasonHashes = try? container.decode([UInt32].self, forKey: CodingKeys.futureSeasonHashes)
            guardianRankConstantsHash = try? container.decode(UInt32.self, forKey: CodingKeys.guardianRankConstantsHash)
            guardianRanksRootNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.guardianRanksRootNodeHash)
            insertPlugFreeBlockedSocketTypeHashes = try? container.decode([UInt32].self, forKey: CodingKeys.insertPlugFreeBlockedSocketTypeHashes)
            insertPlugFreeProtectedPlugItemHashes = try? container.decode([UInt32].self, forKey: CodingKeys.insertPlugFreeProtectedPlugItemHashes)
            legacySealsRootNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.legacySealsRootNodeHash)
            legacyTriumphsRootNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.legacyTriumphsRootNodeHash)
            loadoutConstantsHash = try? container.decode(UInt32.self, forKey: CodingKeys.loadoutConstantsHash)
            loreRootNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.loreRootNodeHash)
            medalsRootNode = try? container.decode(UInt32.self, forKey: CodingKeys.medalsRootNode)
            medalsRootNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.medalsRootNodeHash)
            metricsRootNode = try? container.decode(UInt32.self, forKey: CodingKeys.metricsRootNode)
            pastSeasonHashes = try? container.decode([UInt32].self, forKey: CodingKeys.pastSeasonHashes)
            recordsRootNode = try? container.decode(UInt32.self, forKey: CodingKeys.recordsRootNode)
            seasonalChallengesPresentationNodeHash = try? container.decode(UInt32.self, forKey: CodingKeys.seasonalChallengesPresentationNodeHash)
            undiscoveredCollectibleImage = try? container.decode(String.self, forKey: CodingKeys.undiscoveredCollectibleImage)
        }
    }
}
